---
//import Branding from "./Branding.tsx";
//import Give from "./Give.astro";
//import { cleanResourceDatum } from "../utils/compositor/cleanResourceDatum";
import type { ResourceDatumProps } from "../types";

interface Props {
  target: string;
  resourceCategory: string | null;
/* eslint-disable @typescript-eslint/no-explicit-any */
  options: any | null;
}

const { target /*, resourceCategory */ } = Astro.props;
/*
const category = resourceCategory || `|`;

// check for codeHooks with payloads
const resourceCategoryUrl =
  `${Astro.url.origin}/api/resources/${category}.json`;
const codeHooksResourceCategoryRequest =
  await fetch(resourceCategoryUrl);
const codeHooksResourcePayloadRaw: ResourceDatum[] =
  codeHooksResourceCategoryRequest.status === 404
    ? []
    : resourceCategory && (await codeHooksResourceCategoryRequest.json());
const codeHooksResourcePayload =
  (codeHooksResourcePayloadRaw?.length &&
    cleanResourceDatum(
      codeHooksResourcePayloadRaw.filter(
        (r: ResourceDatum) =>
          r?.field_category_slug &&
          resourceCategory &&
          resourceCategory.includes(r.field_category_slug)
      )
    )) ||
  [];
*/

/*
use:
{
  target === `Branding` ? (
    <Branding />
  ) : target === `Give` ? (
    <Give />
  ) : target === `PassData` ? (
    <PassData client:load payload={codeHooksResourcePayload} />
  ) : null
}

or keep blank for no code hooks!
*/
---
