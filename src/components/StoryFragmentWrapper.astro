---
import { classNames } from "../utils/helpers";
import PaneWrapper from "@components/PaneWrapper";
import type { Current, ContentMap, PaneDatumProps, PaneNode } from "../types";

export interface Props {
  tailwindBgColour: string | undefined;
  panes: PaneNode[];
  panesPayload: PaneDatumProps[];
  contentMap: ContentMap[];
  current: Current;
}

const { tailwindBgColour, panes, panesPayload, contentMap, current } =
  Astro.props;

// per pane settings
const hiddenPanes: { [key: string]: boolean } = panesPayload.reduce(function (
  acc,
  cur
) {
  if (cur.optionsPayload.hiddenPane) return { ...acc, [cur.id]: true };
  return acc;
}, {});
const overflowHidden: { [key: string]: boolean } = panesPayload.reduce(
  function (acc, cur) {
    if (cur.optionsPayload.overflowHidden) return { ...acc, [cur.id]: true };
    return acc;
  },
  {}
);
const maxHScreen: { [key: string]: boolean } = panesPayload.reduce(function (
  acc,
  cur
) {
  if (cur.optionsPayload.maxHScreen) return { ...acc, [cur.id]: true };
  return acc;
}, {});
---

<astro-storyfragment
  data-id={JSON.stringify(current)}
  data-map={JSON.stringify(contentMap)}
>
  <ul class={tailwindBgColour}>
    {
      panes.map((pane: PaneNode, idx: number) => (
        <>
          <astro-pane key={`pane-${pane.id}`}>
            <li
              id={`pane-${pane.id}`}
              class={classNames(
                `pane`,
                typeof overflowHidden[pane.id] === `boolean`
                  ? `overflow-hidden`
                  : ``,
                typeof maxHScreen[pane.id] === `boolean` ? `h-max-screen` : ``
              )}
              data-hidden={
                typeof hiddenPanes[pane.id] === `boolean` ? `true` : `false`
              }
            >
              <div id={`${pane.field_slug}`}>
                {idx <= 2 ? (
                  <PaneWrapper
                    client:load
                    payload={
                      panesPayload
                        .filter((p: PaneDatumProps) => p.id === pane.id)
                        .at(0)!
                    }
                  />
                ) : (
                  <PaneWrapper
                    client:visible
                    payload={
                      panesPayload
                        .filter((p: PaneDatumProps) => p.id === pane.id)
                        .at(0)!
                    }
                  />
                )}
              </div>
            </li>
          </astro-pane>
        </>
      ))
    }
  </ul>
</astro-storyfragment>

<script>
  import { current, contentMap } from "../store/events";

  class StoryFragment extends HTMLElement {
    constructor() {
      super();
      const id = this.dataset.id;
      if (id) current.set(JSON.parse(id));
      const contentMapPayload = this.dataset.map;
      if (contentMapPayload) contentMap.set([JSON.parse(contentMapPayload)]);
      this.querySelector("ul");
    }
  }
  customElements.define("astro-storyfragment", StoryFragment);

  class Pane extends HTMLElement {
    constructor() {
      super();
      this.querySelector("li");
    }
  }
  customElements.define("astro-pane", Pane);
</script>

<script>
  import { handleResize } from "../utils/helpers";
  import { eventStream } from "../utils/events/eventStream";
  import { inView } from "../utils/events/inView";
  import {scrollToTop} from "../utils/scrollToTop";
  import { eventProcessQueue } from "../utils/events/eventProcessQueue";
  import { init } from "../utils/init";

  window.addEventListener(`resize`, handleResize);

  document.addEventListener("astro:page-load", () => {
    handleResize();
    eventStream();
    inView();
    scrollToTop();
  });
  document.addEventListener("astro:before-swap", () => eventProcessQueue());

  init();
</script>
