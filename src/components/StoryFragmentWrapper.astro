---
import { classNames } from "../utils/helpers";
import Pane from "./Pane.astro";
import CodeHook from "../custom/codehooks.astro";
import Filter from "@components/Filter";
import type {
  Current,
  ContentMap,
  PaneDatumProps,
  CodeHookDatum,
} from "../types";

export interface Props {
  tailwindBgColour: string | undefined;
  panesPayload: PaneDatumProps[];
  contentMap: ContentMap[];
  current: Current;
}

const { tailwindBgColour, panesPayload, contentMap, current } = Astro.props;

// per pane settings
const applyFilter: { [key: string]: boolean } = panesPayload.reduce(function (
  acc,
  cur
) {
  if (cur.optionsPayload.heldBeliefs || cur.optionsPayload.withheldBeliefs)
    return { ...acc, [cur.id]: true };
  return acc;
}, {});
const hiddenPanes: { [key: string]: boolean } = panesPayload.reduce(function (
  acc,
  cur
) {
  if (cur.optionsPayload.hiddenPane) return { ...acc, [cur.id]: true };
  return acc;
}, {});
const overflowHidden: { [key: string]: boolean } = panesPayload.reduce(
  function (acc, cur) {
    if (cur.optionsPayload.overflowHidden) return { ...acc, [cur.id]: true };
    return acc;
  },
  {}
);
const maxHScreen: { [key: string]: boolean } = panesPayload.reduce(function (
  acc,
  cur
) {
  if (cur.optionsPayload.maxHScreen) return { ...acc, [cur.id]: true };
  return acc;
}, {});

const perCodeHookPayload: { [key: number]: CodeHookDatum } = {};
const perCodeHookResources: { [key: number]: string } = {};
const perCodeHookOptions: { [key: number]: string } = {};
panesPayload.forEach((p: PaneDatumProps, idx: number) => {
  if (p?.optionsPayload?.codeHook?.options) {
    try {
      const thisOptions = JSON.parse(p.optionsPayload.codeHook.options);
      if (thisOptions.category)
        perCodeHookResources[idx] = thisOptions.category;
      else {
        perCodeHookOptions[idx] = thisOptions;
      }
    } finally {
    }
  }
  if (p?.optionsPayload?.codeHook?.target)
    perCodeHookPayload[idx] = p.optionsPayload.codeHook;
});
---

<astro-storyfragment
  data-id={JSON.stringify(current)}
  data-map={JSON.stringify(contentMap)}
>
  <div
    class={classNames(
      tailwindBgColour ? tailwindBgColour : ``,
      `overflow-hidden`
    )}
  >
    {
      panesPayload.map((pane: PaneDatumProps, idx: number) => (
        <div
          id={`pane-${pane.id}`}
          class={classNames(
            `pane`,
            typeof applyFilter[pane.id] === `boolean` ? `invisible` : ``,
            typeof overflowHidden[pane.id] === `boolean`
              ? `overflow-hidden`
              : ``,
            typeof maxHScreen[pane.id] === `boolean` ? `h-max-screen` : ``
          )}
          data-hidden={
            typeof hiddenPanes[pane.id] === `boolean` ? `true` : `false`
          }
        >
          {!hiddenPanes[pane.id] ? (
            <Filter
              client:load
              id={pane.id}
              heldBeliefsFilter={pane.optionsPayload?.heldBeliefs}
              withheldBeliefsFilter={pane.optionsPayload?.withheldBeliefs}
            />
          ) : null}
          {perCodeHookPayload[idx] ? (
            <div id={pane.slug}>
              <CodeHook
                target={perCodeHookPayload[idx].target}
                resourceCategory={perCodeHookResources[idx] || null}
                options={perCodeHookOptions[idx] || null}
              />
            </div>
          ) : (
            <Pane
              payload={
                panesPayload
                  .filter((p: PaneDatumProps) => p.id === pane.id)
                  .at(0)!
              }
            />
          )}
        </div>
      ))
    }
  </div>
</astro-storyfragment>

<script>
  import { storySteps, current, contentMap } from "../store/events";

  class StoryFragment extends HTMLElement {
    constructor() {
      super();
      const id = this.dataset.id;
      const thisId = id ? JSON.parse(id) : null;
      if (thisId) {
        current.set(thisId);
        const storyStep = {
          id: thisId.id,
          slug: thisId.slug,
          title: thisId.title,
          type: `StoryFragment`,
        };
        storySteps.set([...storySteps.get(), storyStep]);
      }
      const contentMapPayload = this.dataset.map;
      if (contentMapPayload) contentMap.set(JSON.parse(contentMapPayload));
    }
  }
  customElements.define("astro-storyfragment", StoryFragment);
</script>
