---
import { classNames } from "../utils/helpers";
import Pane from "@components/Pane";
import type { Current, ContentMap, PaneDatumProps } from "../types";

export interface Props {
  tailwindBgColour: string | undefined;
  panesPayload: PaneDatumProps[];
  contentMap: ContentMap[];
  current: Current;
}

const { tailwindBgColour, panesPayload, contentMap, current } = Astro.props;

// per pane settings
const hiddenPanes: { [key: string]: boolean } = panesPayload.reduce(function (
  acc,
  cur
) {
  if (cur.optionsPayload.hiddenPane) return { ...acc, [cur.id]: true };
  return acc;
}, {});
const overflowHidden: { [key: string]: boolean } = panesPayload.reduce(
  function (acc, cur) {
    if (cur.optionsPayload.overflowHidden) return { ...acc, [cur.id]: true };
    return acc;
  },
  {}
);
const maxHScreen: { [key: string]: boolean } = panesPayload.reduce(function (
  acc,
  cur
) {
  if (cur.optionsPayload.maxHScreen) return { ...acc, [cur.id]: true };
  return acc;
}, {});
---

<astro-storyfragment
  data-id={JSON.stringify(current)}
  data-map={JSON.stringify(contentMap)}
>
  <div class={classNames(tailwindBgColour ? tailwindBgColour : ``,`overflow-hidden`)}>
    {
      panesPayload.map((pane: PaneDatumProps, idx: number) => (
        <>
          <astro-pane key={`pane-${pane.id}`} id={pane.id}>
            <div
              id={`pane-${pane.id}`}
              class={classNames(
                `pane`,
                typeof overflowHidden[pane.id] === `boolean`
                  ? `overflow-hidden`
                  : ``,
                typeof maxHScreen[pane.id] === `boolean` ? `h-max-screen` : ``
              )}
              data-hidden={
                typeof hiddenPanes[pane.id] === `boolean` ? `true` : `false`
              }
            >
              {idx === 0 ? (
                <Pane
                  client:load
                  payload={
                    panesPayload
                      .filter((p: PaneDatumProps) => p.id === pane.id)
                      .at(0)!
                  }
                />
              ) : (
                <Pane
                  client:idle
                  payload={
                    panesPayload
                      .filter((p: PaneDatumProps) => p.id === pane.id)
                      .at(0)!
                  }
                />
              )}
            </div>
          </astro-pane>
        </>
      ))
    }
  </div>
</astro-storyfragment>

<script>
  import { storySteps, current, contentMap } from "../store/events";

  class StoryFragment extends HTMLElement {
    constructor() {
      super();
      const id = this.dataset.id;
      const thisId = id ? JSON.parse(id) : null;
      if (thisId) {
        current.set(thisId);
        const storyStep = {
          id: thisId.id,
          slug: thisId.slug,
          title: thisId.title,
          type: `StoryFragment`,
        };
        storySteps.set([...storySteps.get(), storyStep]);
      }
      const contentMapPayload = this.dataset.map;
      if (contentMapPayload) contentMap.set(JSON.parse(contentMapPayload));
      this.querySelector("div");
    }
  }
  customElements.define("astro-storyfragment", StoryFragment);

  class Pane extends HTMLElement {
    constructor() {
      super();
      this.querySelector("div");
    }
  }
  customElements.define("astro-pane", Pane);
</script>
