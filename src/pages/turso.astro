---
import {
  getAllStoryFragments,
  getStoryFragmentDatum,
  getAllTractStacks,
  getAllPaneFullDatum,
  getTractStack,
  getMarkdown,
  getAllMarkdowns,
  getAllMenus,
  getMenu,
  getAllResources,
  getResource,
  getAllFiles,
  getFile,
} from "../api/drupal";
import { ulid } from "ulid";

import { createClient } from "@libsql/client/web";

//const uuidToUlidMap = new Map<string, string>();

// from last run --- turso.tractstack.com
const uuidToUlidMap = new Map<string, string>([
  ["792591d0-e19e-4e08-830d-d49f02b446e7", "01J22X51DX0FYFKZ5BRVFM48GW"],
  ["55888ffb-2edf-47c0-b659-f7443c513fc9", "01J22X51DXWSE3MJB610GP9YV5"],
  ["20a8e8c8-89b2-45b7-bd55-c3a07bfe56a8", "01J22X51DXYMK60DBK256XVAQQ"],
  ["bf122f39-a91b-4c1e-97ee-75e53f7a50fb", "01J22X51DX2PFNXZ8CQSZPW8T6"],
  ["8c3e1bc5-f986-4426-8177-39cbfd541d03", "01J22X51DX3CPFTTF97K7B3RYT"],
  ["c8232957-f74f-4033-a1d7-c64c12c07556", "01J22X51DX2XFE4QHYQ9YFQDRW"],
  ["5c7d57ad-bbb8-4292-b92f-78ec086fbcd5", "01J22X51DXKF06FPAN5KG6GBR4"],
  ["e0b69a44-7230-451d-9bf0-c9cfd364d096", "01J22X51DXYWFVBTR1R4BANC4M"],
  ["d0dbdc6a-b642-4739-84d9-4944ac9c4719", "01J22X51DX7TMJQ93J64AFBD1Q"],
  ["2b693750-fb5a-421e-bc99-68e8219d9652", "01J22X51DY15RCJKHHND5YJYRE"],
  ["44936067-3c55-40c5-b6ad-1493bfa01a98", "01J22X51DY6C4WZ5F80T5ETD25"],
  ["bf5e368b-3b9a-4011-a75f-2f53ea317cde", "01J22X51DYMN0G1Y6KY0AAR3BG"],
  ["f4cc513c-97ba-40af-bfb5-6c0a9a240bd1", "01J22X51DY61M2BDTKZFEYTSDV"],
  ["834be9de-af2f-430c-8e08-3640f7a23396", "01J22X51DYT46CB51FSB5NHC62"],
  ["c619080c-05ac-4176-86e6-8218b0970efb", "01J22X51DYN0GTYZN0YF72YNZ5"],
  ["f09e6639-069c-43fd-9037-800ecc5d669b", "01J22X51DY999VD5S2ARX2AZ5Y"],
  ["c5a217d7-047c-4aa5-abc3-391c1a2ed485", "01J22X51DYWXVW7QA2X8M7JH84"],
  ["9a8b719d-fb39-4675-9cfa-20eb6f54981c", "01J22X51DYCFS2SBQT77W9EDEX"],
  ["dd8243d1-8530-415f-ab9b-56003fdfabf1", "01J22X51DYG0XSSYZH41M3MGRE"],
  ["58a9d317-c5a3-48c6-935c-cc54e8866d05", "01J22X51DYTSV8A7HC12DCR9QH"],
  ["0a0dce17-2a83-434d-b102-ad8f3aa520c3", "01J22X51DYE889PEHA4BSX2QMC"],
  ["c365c8e3-3e82-4952-8b77-d6f3791906db", "01J22X51DYJDREG7JX4WDHAWYK"],
  ["d2c6aa6a-3b1d-4ab5-b2f7-b0127a0d80ed", "01J23564PYC5DREFKJ5V845AWF"],
  ["8bb90dd4-b70a-4ec6-adb4-f320f9fb0c15", "01J23564PYDTE9Z1ZPHX8326XX"],
  ["e46baf86-8c89-430a-8916-032c78adc163", "01J23564PYRQN2Y1KW0X59YAKH"],
  ["cb46620b-32a8-4c56-94c6-93d0d99b2746", "01J48PAVV0WBKGM4M6B3MVE4M5"],
  ["253210ea-5754-4489-aee7-76c83b67f0ad", "01J48PAVV14PE2YHXDWYR00C13"],
  ["2026a82e-1027-4380-b382-8f6d5fae4f58", "01J4YDQBTKP2X87B16G2DTDV6R"],
  ["66b5dd0b-5518-4d85-8f1a-1b2c4eea7162", "01J4YDQBTKRW8PWXJW92ZW8CY9"],
  ["8f7982bb-c972-4018-87f4-f128a27205d2", "01J6FT8WFN8EYENFBXJNDX0PX8"],
  ["a176bd60-b21a-470e-92b7-31bb8eff4339", "01J6GD51YRRWXJFYQPQKXM32S5"],
  ["add6b638-8eec-4116-a406-f4e1c1c25d82", "01J6GD51YST530DJZ06VR2SBWW"],
  ["40bc2841-55b5-4851-8484-19766ea8c10a", "01J6GD51YSSYMW269669TYZFS6"],
  ["cb4d95c8-2b10-442c-b306-c5e132f95dd8", "01J6GD51YSGWPXVHJ7NPX1F6VQ"],
]);

function getOrCreateUlid(uuid: string): string {
  let existingUlid = uuidToUlidMap.get(uuid);
  if (!existingUlid) {
    existingUlid = ulid();
    console.log(`new mapping ${uuid} -> ${existingUlid}`);
    uuidToUlidMap.set(uuid, existingUlid);
  }
  return existingUlid;
}

export const turso = createClient({
  url: import.meta.env.TURSO_DATABASE_URL,
  authToken: import.meta.env.TURSO_AUTH_TOKEN,
});

// source data from Drupal

const allTractStacks = await getAllTractStacks();
const _tractstacks = await Promise.all(
  allTractStacks.map(async t => {
    const tractstack = await getTractStack(t.id);
    return tractstack;
  })
);
const tractstacks = _tractstacks.map(innerArray => innerArray[0]).flat() || [];
//console.log(tractstacks);

const files = await getAllFiles();
//console.log(files);

const allMenus = await getAllMenus();
const _menus = await Promise.all(
  allMenus.map(async m => {
    const menu = await getMenu(m.id);
    return menu;
  })
);
const menus = _menus.map(innerArray => innerArray[0]).flat() || [];
//console.log(menus);

const allResources = await getAllResources();
const _resources = await Promise.all(
  allResources.map(async r => {
    const resource = await getResource(r.id);
    return resource;
  })
);
const resources = _resources.map(innerArray => innerArray[0]).flat() || [];
//console.log(resources);

const allMarkdowns = await getAllMarkdowns();
const _markdowns = await Promise.all(
  allMarkdowns.map(async m => {
    const markdown = await getMarkdown(m.id);
    return markdown;
  })
);
const markdowns = _markdowns.map(innerArray => innerArray[0]).flat() || [];
//console.log(markdowns);

const allStoryFragments = await getAllStoryFragments();
const _storyfragments = await Promise.all(
  allStoryFragments.map(async s => {
    const storyfragment = await getStoryFragmentDatum(s.id);
    return storyfragment;
  })
);
const storyfragments =
  _storyfragments.map(innerArray => innerArray[0]).flat() || [];
//console.log(storyfragments);

const panes = await getAllPaneFullDatum();
//console.log(panes);

// Prepare initial records

const tractstacksData = tractstacks.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    title: s.title,
    slug: s.field_slug,
    social_image_path: s.field_social_image_path,
  };
});
//console.log(tractstacksData);

const storyfragmentsData = storyfragments.map(s => {
  const ulid = getOrCreateUlid(s.id);
  const menuId =
    (s?.field_menu?.id && getOrCreateUlid(s.field_menu.id)) || null;
  const tractStackId = getOrCreateUlid(s.field_tract_stack.id);
  return {
    id: ulid,
    title: s.title,
    slug: s.field_slug,
    social_image_path: s.field_social_image_path,
    tailwind_background_colour: s.field_tailwind_background_colour,
    created: new Date(s.created).toISOString().slice(0, 19).replace("T", " "),
    changed:
      (s.changed &&
        new Date(s.changed).toISOString().slice(0, 19).replace("T", " ")) ||
      null,
    menu_id: menuId,
    tractstack_id: tractStackId,
  };
});
//console.log(storyfragmentsData);

const panesData = panes.map(s => {
  const ulid = getOrCreateUlid(s.id);
  const thisMarkdown = s.field_markdown.at(0);
  const markdownId =
    (thisMarkdown?.id && getOrCreateUlid(thisMarkdown.id)) || null;
  const tempVal = s?.field_options && JSON.parse(s.field_options);
  const fragments = tempVal.paneFragmentsPayload;
  tempVal.paneFragmentsPayload = fragments?.map(f => {
    const newVal = f;
    delete newVal.id;
    delete newVal.markdownId;
    if (newVal?.optionsPayload?.classNamesPayload?.toggle)
      delete newVal.optionsPayload.classNamesPayload.toggle;
    if (newVal?.optionsPayload?.classNamesPayload?.imageContainer)
      delete newVal.optionsPayload.classNamesPayload.imageContainer;
    newVal.type = newVal.internal.type;
    delete newVal.internal.type;
    delete newVal.internal;
    //if (newVal?.optionsPayload?.classNamesPayload?.parent?.classes) {
    //  console.log(`<parent>`);
    //  console.log(newVal.optionsPayload.classNamesPayload.parent.classes);
    //}
    //if (newVal?.optionsPayload?.classNamesPayload?.p?.classes) {
    //  console.log(`<p>`);
    //  console.log(newVal.optionsPayload.classNamesPayload.p.classes);
    //}
    //if (newVal?.optionsPayload?.classNamesPayload?.h2?.classes) {
    //  console.log(`<h2>`);
    //  console.log(newVal.optionsPayload.classNamesPayload.h2.classes);
    //}
    //console.log(``);
    //console.log(newVal);
    return newVal;
  });
  tempVal.impressions =
    tempVal?.impressions &&
    Object.keys(tempVal.impressions).map(i => {
      const tempI = tempVal.impressions[i];
      delete tempI.id;
      tempI.parentId = getOrCreateUlid(tempI.parentId);
      return tempI;
    });
  if (typeof tempVal.impressions === `undefined`) delete tempVal.impressions;
  if (typeof tempVal.paneFragmentsPayload === `undefined`)
    delete tempVal.paneFragmentsPayload;
  return {
    id: ulid,
    title: s.title,
    slug: s.field_slug,
    created: new Date(s.created).toISOString().slice(0, 19).replace("T", " "),
    changed:
      (s.changed &&
        new Date(s.changed).toISOString().slice(0, 19).replace("T", " ")) ||
      null,
    is_context_pane: s.field_is_context_pane,
    markdown_id: markdownId,
    options_payload: (s?.field_options && JSON.stringify(tempVal)) || `{}`,
    height_offset_desktop: s.field_height_offset_desktop,
    height_offset_tablet: s.field_height_offset_tablet,
    height_offset_mobile: s.field_height_offset_mobile,
    height_ratio_desktop: s.field_height_ratio_desktop,
    height_ratio_tablet: s.field_height_ratio_tablet,
    height_ratio_mobile: s.field_height_ratio_mobile,
  };
});
//console.log(panesData);

const resourcesData = resources.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    title: s.title,
    slug: s.field_slug,
    category_slug: s.field_category_slug,
    oneliner: s.field_oneliner,
    options_payload: s.field_options,
    action_lisp: s.field_action_lisp,
  };
});
//console.log(resourcesData);

const markdownsData = markdowns.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    body: s.field_markdown_body,
  };
});
//console.log(markdownsData);

const currentDate = new Date();
const formattedDate = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, "0")}`;
const filesData = files.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    filename: s.filename,
    url: `/custom/images/${formattedDate}/${s.filename}`,
  };
});
//console.log(filesData);

const menusData = menus.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    title: s.title,
    theme: s.field_theme,
    options_payload: s.field_options,
  };
});
//console.log(menusData);

const storyfragmentsPanesData = storyfragments.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    paneIds: s.field_panes.map(t => getOrCreateUlid(t.id)),
  };
});
//console.log(storyfragmentsPanesData);

const filesPanesData = panes
  .map(s => {
    const ulid = getOrCreateUlid(s.id);
    const images = s.field_image.map(t => getOrCreateUlid(t.id));
    const svgs = s.field_image_svg.map(t => getOrCreateUlid(t.id));
    if (images.length || svgs.length)
      return {
        id: ulid,
        images,
        svgs,
      };
    else return null;
  })
  .filter(n => n);
//console.log(filesPanesData);

const filesMarkdownsData = markdowns
  .map(s => {
    const ulid = getOrCreateUlid(s.id);
    const images = s.field_image.map(t => getOrCreateUlid(t.id));
    const svgs = s.field_image_svg.map(t => getOrCreateUlid(t.id));
    if (images.length || svgs.length)
      return {
        id: ulid,
        images,
        svgs,
      };
    else return null;
  })
  .filter(n => n);
//console.log(filesMarkdownsData);

// must init database

try {
  await turso.execute(`
  PRAGMA foreign_keys = OFF;`);
  await turso.execute(`DROP TABLE IF EXISTS storyfragment_pane;`);
  await turso.execute(`DROP TABLE IF EXISTS file_pane;`);
  await turso.execute(`DROP TABLE IF EXISTS file_markdown;`);
  await turso.execute(`DROP TABLE IF EXISTS pane;`);
  await turso.execute(`DROP TABLE IF EXISTS storyfragment;`);
  await turso.execute(`DROP TABLE IF EXISTS markdown;`);
  await turso.execute(`DROP TABLE IF EXISTS file;`);
  await turso.execute(`DROP TABLE IF EXISTS resource;`);
  await turso.execute(`DROP TABLE IF EXISTS menu;`);
  await turso.execute(`DROP TABLE IF EXISTS tractstack;`);
  await turso.execute(`
  PRAGMA foreign_keys = ON;
`);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS tractstack (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        slug TEXT NOT NULL UNIQUE,
        social_image_path TEXT
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS menu (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        theme TEXT NOT NULL,
        options_payload TEXT NOT NULL
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS resource (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        slug TEXT NOT NULL UNIQUE,
        category_slug TEXT,
        oneliner TEXT NOT NULL,
        options_payload TEXT NOT NULL,
        action_lisp TEXT
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS file (
        id TEXT PRIMARY KEY,
        filename TEXT NOT NULL,
        alt_description TEXT NOT NULL,
        url TEXT NOT NULL
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS markdown (
        id TEXT PRIMARY KEY,
        body TEXT NOT NULL
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS storyfragment (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        slug TEXT NOT NULL UNIQUE,
        social_image_path TEXT,
        tailwind_background_colour TEXT,
        created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        changed TIMESTAMP,
        menu_id TEXT REFERENCES menu(id),
        tractstack_id TEXT NOT NULL REFERENCES tractstack(id)
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS pane (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        slug TEXT NOT NULL UNIQUE,
        created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        changed TIMESTAMP,
        markdown_id TEXT REFERENCES markdown(id),
        options_payload TEXT NOT NULL,
        is_context_pane BOOLEAN DEFAULT 0,
        height_offset_desktop INTEGER,
        height_offset_mobile INTEGER,
        height_offset_tablet INTEGER,
        height_ratio_desktop TEXT,
        height_ratio_mobile TEXT,
        height_ratio_tablet TEXT
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS storyfragment_pane (
        id TEXT PRIMARY KEY,
        storyfragment_id TEXT NOT NULL REFERENCES storyfragment(id),
        pane_id TEXT NOT NULL REFERENCES pane(id),
        weight INTEGER NOT NULL
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS file_pane (
        id TEXT PRIMARY KEY,
        file_id TEXT NOT NULL REFERENCES file(id),
        pane_id TEXT NOT NULL REFERENCES pane(id)
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS file_markdown (
        id TEXT PRIMARY KEY,
        file_id TEXT NOT NULL REFERENCES file(id),
        markdown_id TEXT NOT NULL REFERENCES markdown(id)
      )
    `);

  // Insert initial records

  for (const resource of resourcesData) {
    await turso.execute({
      sql: "INSERT INTO resource (id,title,slug,category_slug,oneliner,options_payload,action_lisp) VALUES (?, ?,?,?,?,?,?)",
      args: [
        resource.id,
        resource.title,
        resource.slug,
        resource.category_slug,
        resource.oneliner,
        resource.options_payload,
        resource.action_lisp,
      ],
    });
  }

  for (const menu of menusData) {
    await turso.execute({
      sql: "INSERT INTO menu (id,title,theme,options_payload) VALUES (?,?,?,?)",
      args: [menu.id, menu.title, menu.theme, menu.options_payload],
    });
  }

  for (const file of filesData) {
    await turso.execute({
      sql: "INSERT INTO file (id,filename,url,alt_description) VALUES (?,?,?,?)",
      args: [file.id, file.filename, file.url, file.filename],
    });
  }

  for (const markdown of markdownsData) {
    await turso.execute({
      sql: "INSERT INTO markdown (id,body) VALUES (?,?)",
      args: [markdown.id, markdown.body],
    });
  }

  for (const tractstack of tractstacksData) {
    await turso.execute({
      sql: "INSERT INTO tractstack (id,title,slug,social_image_path) VALUES (?,?,?,?)",
      args: [
        tractstack.id,
        tractstack.title,
        tractstack.slug,
        tractstack.social_image_path,
      ],
    });
  }

  for (const storyfragment of storyfragmentsData) {
    await turso.execute({
      sql: "INSERT INTO storyfragment (id,title,slug,social_image_path,tailwind_background_colour,created,changed,menu_id,tractstack_id) VALUES (?,?,?,?,?,?,?,?,?)",
      args: [
        storyfragment.id,
        storyfragment.title,
        storyfragment.slug,
        storyfragment.social_image_path,
        storyfragment.tailwind_background_colour,
        storyfragment.created,
        storyfragment.changed,
        storyfragment.menu_id,
        storyfragment.tractstack_id,
      ],
    });
  }

  for (const pane of panesData) {
    await turso.execute({
      sql: "INSERT INTO pane (id,title,slug,created,changed,markdown_id,options_payload,is_context_pane,height_offset_desktop,height_offset_tablet,height_offset_mobile,height_ratio_desktop,height_ratio_tablet,height_ratio_mobile) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
      args: [
        pane.id,
        pane.title,
        pane.slug,
        pane.created,
        pane.changed,
        pane.markdown_id,
        pane.options_payload,
        pane.is_context_pane,
        pane.height_offset_desktop,
        pane.height_offset_tablet,
        pane.height_offset_mobile,
        pane.height_ratio_desktop,
        pane.height_ratio_tablet,
        pane.height_ratio_mobile,
      ],
    });
  }

  for (const fileMarkdown of filesMarkdownsData) {
    for (const imageId of fileMarkdown.images) {
      const thisUlid = ulid();
      await turso.execute({
        sql: "INSERT INTO file_markdown (id,file_id,markdown_id) VALUES (?,?,?)",
        args: [thisUlid, imageId, fileMarkdown.id],
      });
    }
    for (const imageId of fileMarkdown.svgs) {
      const thisUlid = ulid();
      await turso.execute({
        sql: "INSERT INTO file_markdown (id,file_id,markdown_id) VALUES (?,?,?)",
        args: [thisUlid, imageId, fileMarkdown.id],
      });
    }
  }

  for (const filePane of filesPanesData) {
    for (const imageId of filePane.images) {
      const thisUlid = ulid();
      await turso.execute({
        sql: "INSERT INTO file_pane (id,file_id,pane_id) VALUES (?,?,?)",
        args: [thisUlid, imageId, filePane.id],
      });
    }
    for (const imageId of fileMarkdown.svgs) {
      const thisUlid = ulid();
      await turso.execute({
        sql: "INSERT INTO file_pane (id,file_id,pane_id) VALUES (?,?,?)",
        args: [thisUlid, imageId, filePane.id],
      });
    }
  }

  for (const storyfragmentPane of storyfragmentsPanesData) {
    let weight = 1;
    for (const paneId of storyfragmentPane.paneIds) {
      const thisUlid = ulid();
      await turso.execute({
        sql: "INSERT INTO storyfragment_pane (id, storyfragment_id, pane_id, weight) VALUES (?, ?, ?, ?)",
        args: [thisUlid, storyfragmentPane.id, paneId, weight],
      });
      weight++;
    }
  }
} catch (error) {
  console.error("Error accessing Turso database:", error);
}
console.log(uuidToUlidMap);
---

<h2>push data to Turso</h2>
<br />
<h3>Tract Stacks by uuid</h3>
<ul>
  {tractstacks.map(n => <li>{n.id}</li>)}
  {!tractstacks.length ? <li>none</li> : null}
</ul>
<br />
<h3>Story Fragments by uuid</h3>
<ul>
  {storyfragments.map(n => <li>{n.id}</li>)}
  {!storyfragments.length ? <li>none</li> : null}
</ul>
<br />
<h3>Panes by uuid</h3>
<ul>
  {panes.map(n => <li>{n.id}</li>)}
  {!panes.length ? <li>none</li> : null}
</ul>
<br />
<h3>Markdowns by uuid</h3>
<ul>
  {markdowns.map(n => <li>{n.id}</li>)}
  {!markdowns.length ? <li>none</li> : null}
</ul>
<br />
<h3>Files by uuid</h3>
<ul>
  {files.map(n => <li>{n.id}</li>)}
  {!files.length ? <li>none</li> : null}
</ul>
<br />
<h3>Resources by uuid</h3>
<ul>
  {resources.map(n => <li>{n.id}</li>)}
  {!resources.length ? <li>none</li> : null}
</ul>
<br />
<h3>Menus by uuid</h3>
<ul>
  {menus.map(n => <li>{n.id}</li>)}
  {!menus.length ? <li>none</li> : null}
</ul>
<br />
