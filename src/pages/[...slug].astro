---
import Layout from "@layouts/Layout.astro";
import { getStoryFragment, getAllStoryFragments } from "../api/drupal";
import type { StoryFragment, StoryFragmentDatum } from "../types";

export async function getStaticPaths() {
  const storyFragments: StoryFragment[] = await getAllStoryFragments();
  const pathsPromises: Promise<{
    params: { slug: string };
    props: { title: string; id: string; slug: string };
  }>[] = storyFragments.map(async (storyFragment: StoryFragment) => {
    return {
      params: { slug: storyFragment.field_slug },
      props: {
        title: storyFragment.title,
        id: storyFragment.id,
        slug: storyFragment.field_slug,
      },
    };
  });
  return Promise.all(pathsPromises);
}
const { title, slug, id }: { title: string; slug: string; id: string } =
  Astro.props;
const storyFragment: StoryFragmentDatum[] = await getStoryFragment(id);
const thisStoryFragment = storyFragment.at(0);
if (!thisStoryFragment)
  return new Response(null, {
    status: 301,
    headers: { Location: "/404" },
  });

export const prerender = true;
---

<p>{title}</p>
<p><strong>slug:</strong> {slug}</p>
<p><strong>id:</strong> {id}</p>
<p>
  <strong>storyFragment payload:</strong>
  {JSON.stringify(thisStoryFragment)}
</p>
<h2>panes</h2>
<ul>
  {
    thisStoryFragment.field_panes.map((pane: any, idx: number) => (
      <astro-pane data-id={`pane-${pane.id}`} key={`pane-${pane.id}`}>
        <li
          id={`pane-${pane.id}`}
          class="pane"
          hx-get={`/partials/pane/${pane.id}`}
          hx-trigger={idx < 2 ? `load` : `revealed`}
          hx-swap="innerHTML"
        />
      </astro-pane>
    ))
  }
</ul>
<a href="/welcome">welcome</a>
<a href="/get">get</a>

<script>
  class Pane extends HTMLElement {
    constructor() {
      super();
      const id = this.dataset.id;
      const li = this.querySelector("li");
    }
  }
  customElements.define("astro-pane", Pane);
</script>
<script>
  import InView from "@opuu/inview";
  import type { InViewEvent } from "@opuu/inview";
  import { panesVisible,lastRun } from "../store/events.ts";
  import { eventStream } from "../utils/eventStream";

  eventStream();

  const elements = new InView({
    selector: ".pane",
    delay: 100,
    single: false,
  });

  elements.on("enter", (event: InViewEvent) => {
    const id = event.target.id.substring(5);
    if (!panesVisible.get()[id]) {
      panesVisible.setKey(id, Date.now());
      console.log(`enter`, id);
    }
  });

  elements.on("exit", (event: InViewEvent) => {
    const id = event.target.id.substring(5);
    if (panesVisible.get()[id]) {
      const diff = Date.now() - panesVisible.get()[id]
      panesVisible.setKey(id, null);
      console.log(`exit`, id,diff/1000);
    }
  });
</script>
