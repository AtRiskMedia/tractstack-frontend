---
import { classNames } from "@tractstack/helpers";
import Layout from "@layouts/Layout.astro";
import PaneWrapper from "@components/PaneWrapper.tsx";
import { getAllStoryFragmentDatum, getAllPaneDatum } from "../api/drupal";
import type {
  MenuDatum,
  TractStack,
  Pane,
  PaneDatum,
  PaneDatumProps,
  PaneNode,
  StoryFragmentDatum,
  StoryFragment,
  StoryFragmentProps,
  ContentMap,
} from "../types";
import { cleanPaneDatum } from "../utils/cleanPaneDatum";

export async function getStaticPaths() {
  const storyFragments: StoryFragmentDatum[] = await getAllStoryFragmentDatum();
  const contentMap: ContentMap[] = storyFragments.map(
    (s: StoryFragmentDatum) => {
      return {
        id: s.id,
        slug: s.field_slug,
        parentId: s.field_tract_stack.id,
        parentSlug: s.field_tract_stack.field_slug,
      };
    }
  );
  const panes = await getAllPaneDatum();
  const pathsPromises: Promise<{
    params: { slug: string };
    props: StoryFragmentProps;
  }>[] = storyFragments.map(async (storyFragment: StoryFragmentDatum) => {
    const date = new Date(storyFragment.changed);
    const msTimecode = date.getTime();
    const thisPanes = storyFragment.field_panes.map((p: PaneNode) => p.id);
    const panesPayload: PaneDatumProps[] = panes
      .filter((payload: PaneDatum) => thisPanes.includes(payload.id))
      .map((payload: PaneDatum) => {
        return cleanPaneDatum(payload);
      });

    return {
      params: { slug: storyFragment.field_slug },
      props: {
        title: storyFragment.title,
        id: storyFragment.id,
        slug: storyFragment.field_slug,
        drupalNid: storyFragment.drupal_internal__nid,
        socialImagePath: storyFragment.field_social_image_path || undefined,
        tailwindBgColour:
          storyFragment.field_tailwind_background_colour || undefined,
        menu: storyFragment.field_menu,
        panes: storyFragment.field_panes,
        panesPayload,
        tractStackId: storyFragment.field_tract_stack.id,
        tractStackTitle: storyFragment.field_tract_stack.title,
        tractStackSlug: storyFragment.field_tract_stack.field_slug,
        changed: msTimecode,
        contentMap,
      },
    };
  });
  return Promise.all(pathsPromises);
}
const {
  title,
  id,
  slug,
  drupalNid,
  socialImagePath,
  tailwindBgColour,
  menu,
  panes,
  panesPayload,
  tractStackId,
  tractStackTitle,
  tractStackSlug,
  changed,
  contentMap,
}: StoryFragmentProps = Astro.props;
const current = {
  id,
  slug,
  parentId: tractStackId,
  parentSlug: tractStackSlug,
};

const hiddenPanes: { [key: string]: boolean } = panesPayload.reduce(function (
  acc,
  cur
) {
  if (cur.id === `dd3569e6-0b60-4087-9cdf-108efec8f9db`)
    if (cur.optionsPayload.hiddenPane) return { ...acc, [cur.id]: true };
  return acc;
}, {});
const overflowHidden: { [key: string]: boolean } = panesPayload.reduce(
  function (acc, cur) {
    if (cur.optionsPayload.overflowHidden) return { ...acc, [cur.id]: true };
    return acc;
  },
  {}
);
const maxHScreen: { [key: string]: boolean } = panesPayload.reduce(function (
  acc,
  cur
) {
  if (cur.optionsPayload.maxHScreen) return { ...acc, [cur.id]: true };
  return acc;
}, {});

export const prerender = true;
---

<Layout>
  <main id="main-content">
    <h1>{title}</h1>
    <h2>Story Fragment</h2>
    <p><strong>slug:</strong> {slug}</p>
    <p><strong>id:</strong> {id}</p>
    <p><strong>changed:</strong> {changed}</p>
    <p><strong>contentMap:</strong> {JSON.stringify(contentMap)}</p>
    <h2>Parent</h2>
    <p>{tractStackTitle}</p>
    <p><strong>slug:</strong> {tractStackSlug}</p>
    <p><strong>id:</strong> {tractStackId}</p>
    {
      !!menu ? (
        <>
          <h2>Menu</h2>
          <p>{JSON.stringify(menu)}</p>
        </>
      ) : null
    }
    <h2>Panes</h2>
    <astro-storyfragment data-id={JSON.stringify(current)}>
      <ul class={tailwindBgColour}>
        {
          panes.map((pane: PaneNode, idx: number) => (
            <astro-pane key={`pane-${pane.id}`}>
              <li
                id={`pane-${pane.id}`}
                class={classNames(
                  `pane`,
                  typeof overflowHidden[pane.id] === `boolean`
                    ? `overflow-hidden`
                    : ``,
                  typeof maxHScreen[pane.id] === `boolean` ? `h-max-screen` : ``
                )}
                data-hidden={
                  typeof hiddenPanes[pane.id] === `boolean` ? `true` : `false`
                }
              >
                {idx <= 2 ? (
                  <PaneWrapper
                    client:load
                    current={current}
                    contentMap={contentMap}
                    payload={
                      panesPayload
                        .filter((p: PaneDatumProps) => p.id === pane.id)
                        .at(0)!
                    }
                  />
                ) : (
                  <PaneWrapper
                    client:visible
                    current={current}
                    contentMap={contentMap}
                    payload={
                      panesPayload
                        .filter((p: PaneDatumProps) => p.id === pane.id)
                        .at(0)!
                    }
                  />
                )}
              </li>
            </astro-pane>
          ))
        }
      </ul>
    </astro-storyfragment>

    <div class="my-6">
      {
        contentMap
          .filter(m => m.slug !== slug)
          .map(m => (
            <astro-link data-id={m.slug}>
              <a class="py-2 px-3 hover:text-blue-800" href={`/${m.slug}`}>
                {m.slug}
              </a>
            </astro-link>
          ))
      }
    </div>
  </main>
</Layout>

<script>
  import { init } from "../utils/init";
  init();
</script>
