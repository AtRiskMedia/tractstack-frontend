---
import StoryFragmentWrapper from "@components/StoryFragmentWrapper.astro";
import ImpressionWrapper from "@components/ImpressionWrapper";
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import HeaderWidget from "../custom/HeaderWidget.astro";
import Footer from "@components/Footer.astro";
import { getImage } from "astro:assets";
import { cleanPaneDatum } from "../utils/compositor/cleanPaneDatum";
import { cleanFileDatum } from "../utils/compositor/cleanFileDatum";
import { cleanImpressionsDatum } from "../utils/compositor/cleanImpressionsDatum";
import { ENABLE_HEADER_WIDGET } from "../constants";
import type {
  StoryFragmentFullDatum,
  ImpressionDatum,
  PaneDatumProps,
  PaneFileNode,
  PaneFullDatum,
  OptimizedImage,
  OptimizedImagePre,
  FileNode,
  MarkdownFullDatum,
  Current,
  ContentMap,
  StylesVersion,
} from "../types";

const stylesVerUrl = `${import.meta.env.PUBLIC_CONCIERGE_STYLES_URL}/v.json`;
const requestStyles: Response = await fetch(stylesVerUrl);
const stylesVer: StylesVersion =
  requestStyles.status === 404 ? 0 : await requestStyles.json();
const stylesUrl = `${import.meta.env.PUBLIC_CONCIERGE_STYLES_URL}/frontend.css?v=${stylesVer?.v || 0}`;

const { slug } = Astro.params;
const lookup = slug || import.meta.env.PUBLIC_HOME;
const url = `${Astro.url.origin}/api/contentMap.json`;
const request: Response = await fetch(url);
const contentMap: ContentMap[] =
  request.status === 404 ? [] : await request.json();
const id = contentMap.find(c => c.slug === lookup)?.id;
if (id === undefined) {
  return Astro.redirect("/404");
}
const urlDatum = `${Astro.url.origin}/api/storyfragment/${id}.json`;
const requestDatum: Response = await fetch(urlDatum);
const storyFragment: StoryFragmentFullDatum =
  requestDatum.status === 404 ? [] : await requestDatum.json();
if (!storyFragment) {
  return Astro.redirect("/404");
}
const title = storyFragment?.title;
const socialImagePath = storyFragment?.field_social_image_path || undefined;
const tailwindBgColour =
  storyFragment?.field_tailwind_background_colour || undefined;
const menu = storyFragment?.field_menu;
const panes = storyFragment?.field_panes;
const tractStackId = storyFragment?.field_tract_stack.id;
const tractStackTitle = storyFragment?.field_tract_stack.title;
const tractStackSlug = storyFragment?.field_tract_stack.field_slug;
const changed = storyFragment?.created ? new Date(storyFragment.created) : null;
const created = storyFragment?.changed
  ? new Date(storyFragment?.changed)
  : null;

// id for this storyFragment
const current: Current = {
  id: id || ``,
  slug: slug || ``,
  title: title || ``,
  parentId: tractStackId || ``,
  parentSlug: tractStackSlug || ``,
  parentTitle: tractStackTitle || ``,
};

// optimize images
const optimizedImagesPre: OptimizedImagePre[] = [];
panes.forEach((p: PaneFullDatum) => {
  const markdownFiles =
    p?.field_markdown
      .map((m: MarkdownFullDatum) => {
        let val: FileNode[] = [];
        if (typeof m.field_image === `object`) val = val.concat(m.field_image);
        if (typeof m.field_image_svg === `object`)
          val = val.concat(m.field_image_svg);
        return val;
      })
      .at(0) || [];
  let paneFiles: FileNode[] = [];
  if (typeof p.field_image === `object`)
    paneFiles = paneFiles.concat(p.field_image);
  if (typeof p.field_image_svg === `object`)
    paneFiles = paneFiles.concat(p.field_image_svg);
  const allFiles = [...markdownFiles, ...paneFiles];
  allFiles?.forEach((f: FileNode) => {
    const thisFile = f;
    if (
      thisFile &&
      !optimizedImagesPre.filter((i: OptimizedImagePre) => i.id === thisFile.id)
        .length
    )
      optimizedImagesPre.push({
        id: thisFile.id,
        filename: thisFile.filename,
        url: thisFile.uri.url,
      });
  });
});
async function getOptimizedImage(src: string) {
  try {
    const img = await getImage({
      src,
      inferSize: true,
      format: `webp`,
    });
    return img.src;
  } catch {
    console.log(`error`);
    return null;
  }
}
const optimizedImages: OptimizedImage[] = await Promise.all(
  optimizedImagesPre.map(async (i: OptimizedImagePre) => {
    const src = `${import.meta.env.PUBLIC_IMAGE_URL}${i.url}`;
    const optimized = await getOptimizedImage(src);
    if (optimized) {
      const val = { id: i.id, src: optimized };
      return val as OptimizedImage;
    }
    return { id: `404`, src: `` };
  })
);
const paneFileNodes: PaneFileNode[] = [];
panes.forEach((payload: PaneFullDatum) => {
  const thisFilesPayload: FileNode[] = [];
  const markdownFiles =
    payload?.field_markdown
      .map((m: MarkdownFullDatum) => {
        let val: FileNode[] = [];
        if (typeof m.field_image === `object`) {
          val = val.concat(m.field_image);
        }
        if (typeof m.field_image_svg === `object`)
          val = val.concat(m.field_image_svg);
        return val;
      })
      .at(0) || [];
  let paneFiles: FileNode[] = [];
  if (typeof payload.field_image === `object`)
    paneFiles = paneFiles.concat(payload.field_image);
  if (typeof payload.field_image_svg === `object`)
    paneFiles = paneFiles.concat(payload.field_image_svg);
  const allFiles = [...markdownFiles, ...paneFiles];
  allFiles?.forEach((f: FileNode) => {
    const thisFile: FileNode = f;
    if (thisFile) {
      const optimizedSrc = optimizedImages.find(
        (o: OptimizedImage) => o.id === thisFile.id
      );
      if (optimizedSrc)
        thisFilesPayload.push(cleanFileDatum(thisFile, optimizedSrc.src));
    }
  });
  if (thisFilesPayload.length)
    paneFileNodes.push({
      id: payload.id,
      files: thisFilesPayload,
    });
});

// now prepare panes payload
const panesPayload: PaneDatumProps[] = panes.map((payload: PaneFullDatum) => {
  const thisFilesArray = paneFileNodes
    .filter((f: PaneFileNode) => f.id === payload.id)
    .at(0);
  return cleanPaneDatum(payload, thisFilesArray);
});
const impressionsRaw = panesPayload
  .map((payload: PaneDatumProps) => {
    return cleanImpressionsDatum(payload.optionsPayload?.impressions);
  })
  .filter((e: ImpressionDatum | null) => e);
const impressions = impressionsRaw as ImpressionDatum[];
---

<Layout
  title={title}
  pubDatetime={created || new Date()}
  modDatetime={changed || new Date()}
  ogImage={socialImagePath}
  stylesUrl={stylesUrl}
>
  {ENABLE_HEADER_WIDGET ? <HeaderWidget /> : null}
  <Header
    title={title || ``}
    menu={menu}
    slug={lookup}
    impressions={impressions}
  />
  <main id="main-content">
    <StoryFragmentWrapper
      tailwindBgColour={tailwindBgColour}
      panesPayload={panesPayload}
      contentMap={contentMap}
      current={current}
    />
  </main>
  {
    impressions?.length ? (
      <ImpressionWrapper payload={impressions} client:load />
    ) : null
  }
  <Footer created={created || new Date()} menu={menu} backToTop={true} />
</Layout>
