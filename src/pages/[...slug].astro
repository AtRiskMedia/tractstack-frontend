---
import Layout from "@layouts/Layout.astro";
import { getAllStoryFragmentDatum } from "../api/drupal";
import type {
  MenuDatum,
  PaneNode,
  TractStack,
  Pane,
  StoryFragmentDatum,
  StoryFragment,
  StoryFragmentProps,
} from "../types";

export async function getStaticPaths() {
  const storyFragments: StoryFragmentDatum[] = await getAllStoryFragmentDatum();
  const pathsPromises: Promise<{
    params: { slug: string };
    props: StoryFragmentProps;
  }>[] = storyFragments.map(async (storyFragment: StoryFragmentDatum) => {
    return {
      params: { slug: storyFragment.field_slug },
      props: {
        title: storyFragment.title,
        id: storyFragment.id,
        slug: storyFragment.field_slug,
        drupalNid: storyFragment.drupal_internal__nid,
        socialImagePath: storyFragment.field_social_image_path || undefined,
        tailwindBgColour:
          storyFragment.field_tailwind_background_colour || undefined,
        menu: storyFragment.field_menu,
        panes: storyFragment.field_panes,
        tractStackId: storyFragment.field_tract_stack.id,
        tractStackTitle: storyFragment.field_tract_stack.title,
        tractStackSlug: storyFragment.field_tract_stack.field_slug,
      },
    };
  });
  return Promise.all(pathsPromises);
}
const {
  title,
  id,
  slug,
  drupalNid,
  socialImagePath,
  menu,
  panes,
  tractStackId,
  tractStackTitle,
  tractStackSlug,
}: StoryFragmentProps = Astro.props;

export const prerender = true;
---

<h1>{title}</h1>
<p><strong>slug:</strong> {slug}</p>
<p><strong>id:</strong> {id}</p>
<h2>Parent</h2>
<p>{tractStackTitle}</p>
<p><strong>slug:</strong> {tractStackSlug}</p>
<p><strong>id:</strong> {tractStackId}</p>
{
  !!menu ? (
    <>
      <h2>Menu</h2>
      <p>{JSON.stringify(menu)}</p>
    </>
  ) : null
}
<h2>Panes</h2>
<ul>
  {
    panes.map((pane: PaneNode, idx: number) => (
      <astro-pane key={`pane-${pane.id}`}>
        <li
          id={`pane-${pane.id}`}
          class="pane"
          hx-get={`/partials/pane/${pane.id}`}
          hx-trigger={idx < 2 ? `load` : `revealed`}
          hx-swap="innerHTML"
        />
      </astro-pane>
    ))
  }
</ul>

<astro-link data-id={`welcome`}>
  <a href="/welcome">welcome</a>
</astro-link>
<astro-link data-id={`get`}>
  <a href="/get">get</a>
</astro-link>
<astro-link data-id={`agency`}>
  <a href="/agency">agency</a>
</astro-link>
<astro-link data-id={`#`}>
  <a href="#">#</a>
</astro-link>

<script>
  import { inView } from "../utils/inView";
  import { eventStream } from "../utils/eventStream";
  import { events, locked } from "../store/events";
  import { eventProcessQueue } from "../utils/eventProcessQueue";

  class Link extends HTMLElement {
    constructor() {
      super();
      const id = this.dataset.id;
      const a = this.querySelector("a");
      if (a)
        a.addEventListener("click", async () => {
          console.log(`process events before loading`, id);
          locked.set(true);
          eventProcessQueue();
        });
    }
  }
  customElements.define("astro-link", Link);

  class Pane extends HTMLElement {
    constructor() {
      super();
      this.querySelector("li");
    }
  }
  customElements.define("astro-pane", Pane);

  const urlSearchParams = new URLSearchParams(window.location.search);
  const params = Object.fromEntries(urlSearchParams.entries());
  const utmSource = params[`utm_source`] || undefined;
  const utmMedium = params[`utm_medium`] || undefined;
  const utmCampaign = params[`utm_campaign`] || undefined;
  const utmTerm = params[`utm_term`] || undefined;
  const utmContent = params[`utm_content`] || undefined;
  const internal =
    document.referrer.indexOf(location.protocol + "//" + location.host) === 0;

  if (utmSource)
    console.log(
      `params: source=${utmSource} medium=${utmMedium} campaign=${utmCampaign} term=${utmTerm} content=${utmContent}`
    );
  if (!internal) {
    console.log(`entered from external link`, document.referrer, 1);
    const event = {
      id: `?`,
      parentId: `?`,
      type: `StoryFragment`,
      verb: `ENTERED`,
    };
    events.set([...events.get(), event]);
  }

  eventStream();
  inView();
</script>
