---
import { classNames } from "../utils/helpers";
import Layout from "@layouts/Layout.astro";
import Footer from "@components/Footer.astro";
import PaneWrapper from "@components/PaneWrapper";
import {
  getAllStoryFragmentDatum,
  getAllPaneDatum,
  getAllFiles,
} from "../api/drupal";
import type {
  PaneDatum,
  PaneDatumProps,
  PaneNode,
  StoryFragmentDatum,
  StoryFragmentProps,
  ContentMap,
  MarkdownDatum,
  FileNode,
  DrupalFile,
  PaneFileNode,
  OptimizedImagePre,
  OptimizedImage,
  Current,
} from "../types";
import { cleanPaneDatum } from "../utils/compositor/cleanPaneDatum";
import { cleanFileDatum } from "../utils/compositor/cleanFileDatum";
import { getImage } from "astro:assets";

export async function getOptimizedImage(src: string) {
  try {
    const img = await getImage({
      src,
      inferSize: true,
    });
    return img.src;
  } catch {
    console.log(`error`);
  }
}

export async function getStaticPaths() {
  const files = await getAllFiles();
  const panes = await getAllPaneDatum();
  const storyFragments: StoryFragmentDatum[] = await getAllStoryFragmentDatum();
  const contentMap: ContentMap[] = storyFragments
    .map((s: StoryFragmentDatum) => {
      return {
        id: s.id,
        slug: s.field_slug,
        title: s.title,
        type: `StoryFragment`,
        parentId: s.field_tract_stack.id,
        parentSlug: s.field_tract_stack.field_slug,
        parentTitle: s.field_tract_stack.title,
      } as ContentMap;
    })
    .concat(
      panes.map((p: PaneDatum) => {
        return {
          id: p.id,
          slug: p.field_slug,
          title: p.title,
          type: `Pane`,
        } as ContentMap;
      })
    );

  // must intercept image|imageSvg from panes; then optimize
  const optimizedImagesPre: OptimizedImagePre[] = [];
  panes.forEach((p: PaneDatum) => {
    const markdownFiles =
      p?.field_markdown
        .map((m: MarkdownDatum) => {
          let val: DrupalFile[] = [];
          if (typeof m.field_image === `object`)
            val = val.concat(m.field_image);
          if (typeof m.field_image_svg === `object`)
            val = val.concat(m.field_image_svg);
          return val;
        })
        .at(0) || [];
    let paneFiles: DrupalFile[] = [];
    if (typeof p.field_image === `object`)
      paneFiles = paneFiles.concat(p.field_image);
    if (typeof p.field_image_svg === `object`)
      paneFiles = paneFiles.concat(p.field_image_svg);
    const allFiles = [...markdownFiles, ...paneFiles];
    allFiles?.forEach((f: DrupalFile) => {
      const thisFiles = files.filter((n: DrupalFile) => n.id === f.id);
      const thisFile = thisFiles.at(0);
      if (
        thisFile &&
        !optimizedImagesPre.filter(
          (i: OptimizedImagePre) => i.id === thisFile.id
        ).length
      )
        optimizedImagesPre.push({
          id: thisFile.id,
          filename: thisFile.filename,
          url: thisFile.uri.url,
        });
    });
  });
  const optimizedImages = await Promise.all(
    optimizedImagesPre.map(async (i: OptimizedImagePre) => {
      const src = `${import.meta.env.PUBLIC_IMAGE_URL}${i.url}`;
      const optimized = await getOptimizedImage(src);
      const val = { id: i.id, src: optimized };
      return val as OptimizedImage;
    })
  );

  // now generate each storyFragment page payload
  const pathsPromises: Promise<{
    params: { slug: string };
    props: StoryFragmentProps;
  }>[] = storyFragments.map(async (storyFragment: StoryFragmentDatum) => {
    const dateCreated = new Date(storyFragment.created);
    const dateChanged = new Date(storyFragment.changed);
    const thisPanes = storyFragment.field_panes.map((p: PaneNode) => p.id);
    const paneFileNodes: PaneFileNode[] = [];
    panes
      .filter((payload: PaneDatum) => thisPanes.includes(payload.id))
      .forEach((payload: PaneDatum) => {
        const thisFilesPayload: FileNode[] = [];
        const markdownFiles =
          payload?.field_markdown
            .map((m: MarkdownDatum) => {
              let val: DrupalFile[] = [];
              if (typeof m.field_image === `object`) {
                val = val.concat(m.field_image);
              }
              if (typeof m.field_image_svg === `object`)
                val = val.concat(m.field_image_svg);
              return val;
            })
            .at(0) || [];
        let paneFiles: DrupalFile[] = [];
        if (typeof payload.field_image === `object`)
          paneFiles = paneFiles.concat(payload.field_image);
        if (typeof payload.field_image_svg === `object`)
          paneFiles = paneFiles.concat(payload.field_image_svg);
        const allFiles = [...markdownFiles, ...paneFiles];
        allFiles?.forEach((f: DrupalFile) => {
          const thisFiles = files.filter((n: DrupalFile) => n.id === f.id);
          const thisFile = thisFiles.at(0);
          if (thisFile) {
            const optimizedSrcRaw = optimizedImages.filter(
              (i: OptimizedImage) => i.id === thisFile.id
            );
            const optimizedSrc = optimizedSrcRaw.at(0);
            thisFilesPayload.push(cleanFileDatum(thisFile, optimizedSrc?.src));
          }
        });
        if (thisFilesPayload.length)
          paneFileNodes.push({
            id: payload.id,
            files: thisFilesPayload,
          });
      });
    const panesPayload: PaneDatumProps[] = panes
      .filter((payload: PaneDatum) => thisPanes.includes(payload.id))
      .map((payload: PaneDatum) => {
        const thisFilesArray = paneFileNodes
          .filter((f: PaneFileNode) => f.id === payload.id)
          .at(0);
        return cleanPaneDatum(payload, thisFilesArray);
      });

    return {
      params: { slug: storyFragment.field_slug },
      props: {
        title: storyFragment.title,
        id: storyFragment.id,
        slug: storyFragment.field_slug,
        socialImagePath: storyFragment.field_social_image_path || undefined,
        tailwindBgColour:
          storyFragment.field_tailwind_background_colour || undefined,
        menu: storyFragment.field_menu,
        panes: storyFragment.field_panes,
        panesPayload,
        tractStackId: storyFragment.field_tract_stack.id,
        tractStackTitle: storyFragment.field_tract_stack.title,
        tractStackSlug: storyFragment.field_tract_stack.field_slug,
        changed: dateChanged,
        created: dateCreated,
        contentMap,
      },
    };
  });
  return Promise.all(pathsPromises);
}
const {
  title,
  id,
  slug,
  socialImagePath,
  tailwindBgColour,
  menu,
  panes,
  panesPayload,
  tractStackId,
  tractStackTitle,
  tractStackSlug,
  changed,
  created,
  contentMap,
}: StoryFragmentProps = Astro.props;

// id for this storyFragment
const current: Current = {
  id,
  slug,
  title,
  type: `StoryFragment`,
  parentId: tractStackId,
  parentSlug: tractStackSlug,
  parentTitle: tractStackTitle,
};

// per pane settings
const hiddenPanes: { [key: string]: boolean } = panesPayload.reduce(function (
  acc,
  cur
) {
  if (cur.optionsPayload.hiddenPane) return { ...acc, [cur.id]: true };
  return acc;
}, {});
const overflowHidden: { [key: string]: boolean } = panesPayload.reduce(
  function (acc, cur) {
    if (cur.optionsPayload.overflowHidden) return { ...acc, [cur.id]: true };
    return acc;
  },
  {}
);
const maxHScreen: { [key: string]: boolean } = panesPayload.reduce(function (
  acc,
  cur
) {
  if (cur.optionsPayload.maxHScreen) return { ...acc, [cur.id]: true };
  return acc;
}, {});

export const prerender = true;
---

<Layout
  title={title}
  pubDatetime={created}
  modDatetime={changed}
  ogImage={socialImagePath}
>
  <main id="main-content">
    {
      !!menu ? (
        <>
          <h2>Menu</h2>
          <p>{JSON.stringify(menu)}</p>
        </>
      ) : null
    }
    <astro-storyfragment
      data-id={JSON.stringify(current)}
      data-map={JSON.stringify(contentMap)}
    >
      <ul class={tailwindBgColour}>
        {
          panes.map((pane: PaneNode, idx: number) => (
            <>
              <astro-pane key={`pane-${pane.id}`}>
                <li
                  id={`${pane.field_slug}`}
                  class={classNames(
                    `pane`,
                    typeof overflowHidden[pane.id] === `boolean`
                      ? `overflow-hidden`
                      : ``,
                    typeof maxHScreen[pane.id] === `boolean`
                      ? `h-max-screen`
                      : ``
                  )}
                  data-hidden={
                    typeof hiddenPanes[pane.id] === `boolean` ? `true` : `false`
                  }
                >
                  {idx <= 2 ? (
                    <PaneWrapper
                      client:load
                      payload={
                        panesPayload
                          .filter((p: PaneDatumProps) => p.id === pane.id)
                          .at(0)!
                      }
                    />
                  ) : (
                    <PaneWrapper
                      client:visible
                      payload={
                        panesPayload
                          .filter((p: PaneDatumProps) => p.id === pane.id)
                          .at(0)!
                      }
                    />
                  )}
                </li>
              </astro-pane>
            </>
          ))
        }
      </ul>
    </astro-storyfragment>
    <div class="my-6">
      {
        contentMap
          .filter(m => m.slug !== slug && m.type === `StoryFragment`)
          .map(m => (
            <a class="py-2 px-3 hover:text-blue-800" href={`/${m.slug}`}>
              {m.slug}
            </a>
          ))
      }
    </div>
  </main>
  <Footer created={created} />
</Layout>

<script>
  import { init } from "../utils/init";
  import { eventProcessQueue } from "../utils/events/eventProcessQueue";
  import { inView } from "../utils/events/inView";
  import { eventStream } from "../utils/events/eventStream";
  import { handleResize } from "../utils/helpers";

  window.addEventListener(`resize`, handleResize);

  document.addEventListener("astro:page-load", () => {
    handleResize();
    eventStream();
    inView();
  });
  document.addEventListener("astro:before-swap", () => eventProcessQueue());
  init();
</script>
