---
import StoryFragmentWrapper from "@components/StoryFragmentWrapper.astro";
import ImpressionWrapper from "@components/ImpressionWrapper";
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import {
  getStoryFragmentDatum,
  getAllStoryFragments,
  getAllPaneDatum,
  getAllFiles,
} from "../api/drupal";
import type {
  PaneDatum,
  PaneDatumProps,
  PaneNode,
  StoryFragment,
  StoryFragmentDatum,
  ContentMap,
  MarkdownDatum,
  FileNode,
  DrupalFile,
  PaneFileNode,
  OptimizedImagePre,
  OptimizedImage,
  Current,
  ImpressionDatum,
} from "../types";
import { cleanPaneDatum } from "../utils/compositor/cleanPaneDatum";
import { cleanFileDatum } from "../utils/compositor/cleanFileDatum";
import { cleanImpressionsDatum } from "../utils/compositor/cleanImpressionsDatum";
import { getImage } from "astro:assets";

export async function getOptimizedImage(src: string) {
  try {
    const img = await getImage({
      src,
      inferSize: true,
    });
    return img.src;
  } catch {
    console.log(`error`);
  }
}

const id = import.meta.env.PUBLIC_HOME_ID;
const slug = import.meta.env.PUBLIC_HOME;
const files = await getAllFiles();
const allPanes = await getAllPaneDatum();
const storyFragments: StoryFragment[] = await getAllStoryFragments();
const storyFragmentPayload: StoryFragmentDatum[] =
  await getStoryFragmentDatum(id);
const storyFragment = storyFragmentPayload?.at(0);

// fail if PUBLIC_HOME, PUBLIC_HOME_ID not set
if (!storyFragment) {
  Astro.response.status = 404;
  Astro.response.statusText = "Story Keep is not configured.";
}

const title = storyFragment?.title;
const socialImagePath = storyFragment?.field_social_image_path || undefined;
const tailwindBgColour =
  storyFragment?.field_tailwind_background_colour || undefined;
const menu = storyFragment?.field_menu;
const panes = storyFragment?.field_panes;
const tractStackId = storyFragment?.field_tract_stack.id;
const tractStackTitle = storyFragment?.field_tract_stack.title;
const tractStackSlug = storyFragment?.field_tract_stack.field_slug;
const changed = storyFragment?.created ? new Date(storyFragment.created) : null;
const created = storyFragment?.changed
  ? new Date(storyFragment?.changed)
  : null;
const thisPanes = storyFragment?.field_panes.map((p: PaneNode) => p.id);

// id for this storyFragment
const current: Current = {
  id: id || ``,
  slug: slug || ``,
  title: title || ``,
  type: `StoryFragment`,
  parentId: tractStackId || ``,
  parentSlug: tractStackSlug || ``,
  parentTitle: tractStackTitle || ``,
};

const contentMap: ContentMap[] = storyFragments
  .map((s: StoryFragment) => {
    return {
      id: s.id,
      slug: s.field_slug,
      title: s.title,
      type: `StoryFragment`,
      parentId: s.field_tract_stack.id,
      parentSlug: s.field_tract_stack.field_slug,
      parentTitle: s.field_tract_stack.title,
    } as ContentMap;
  })
  .concat(
    allPanes.map((p: PaneDatum) => {
      return {
        id: p.id,
        slug: p.field_slug,
        title: p.title,
        type: `Pane`,
      } as ContentMap;
    })
  );

// must intercept image|imageSvg from panes; then optimize
const optimizedImagesPre: OptimizedImagePre[] = [];
allPanes
  .filter((payload: PaneDatum) => thisPanes?.includes(payload.id))
  .forEach((p: PaneDatum) => {
    const markdownFiles =
      p?.field_markdown
        .map((m: MarkdownDatum) => {
          let val: DrupalFile[] = [];
          if (typeof m.field_image === `object`)
            val = val.concat(m.field_image);
          if (typeof m.field_image_svg === `object`)
            val = val.concat(m.field_image_svg);
          return val;
        })
        .at(0) || [];
    let paneFiles: DrupalFile[] = [];
    if (typeof p.field_image === `object`)
      paneFiles = paneFiles.concat(p.field_image);
    if (typeof p.field_image_svg === `object`)
      paneFiles = paneFiles.concat(p.field_image_svg);
    const allFiles = [...markdownFiles, ...paneFiles];
    allFiles?.forEach((f: DrupalFile) => {
      const thisFiles = files.filter((n: DrupalFile) => n.id === f.id);
      const thisFile = thisFiles.at(0);
      if (
        thisFile &&
        !optimizedImagesPre.filter(
          (i: OptimizedImagePre) => i.id === thisFile.id
        ).length
      )
        optimizedImagesPre.push({
          id: thisFile.id,
          filename: thisFile.filename,
          url: thisFile.uri.url,
        });
    });
  });
const optimizedImages = await Promise.all(
  optimizedImagesPre.map(async (i: OptimizedImagePre) => {
    const src = `${import.meta.env.PUBLIC_IMAGE_URL}${i.url}`;
    const optimized = await getOptimizedImage(src);
    const val = { id: i.id, src: optimized };
    return val as OptimizedImage;
  })
);

const paneFileNodes: PaneFileNode[] = [];
allPanes
  .filter((payload: PaneDatum) => thisPanes?.includes(payload.id))
  .forEach((payload: PaneDatum) => {
    const thisFilesPayload: FileNode[] = [];
    const markdownFiles =
      payload?.field_markdown
        .map((m: MarkdownDatum) => {
          let val: DrupalFile[] = [];
          if (typeof m.field_image === `object`) {
            val = val.concat(m.field_image);
          }
          if (typeof m.field_image_svg === `object`)
            val = val.concat(m.field_image_svg);
          return val;
        })
        .at(0) || [];
    let paneFiles: DrupalFile[] = [];
    if (typeof payload.field_image === `object`)
      paneFiles = paneFiles.concat(payload.field_image);
    if (typeof payload.field_image_svg === `object`)
      paneFiles = paneFiles.concat(payload.field_image_svg);
    const allFiles = [...markdownFiles, ...paneFiles];
    allFiles?.forEach((f: DrupalFile) => {
      const thisFiles = files.filter((n: DrupalFile) => n.id === f.id);
      const thisFile = thisFiles.at(0);
      if (thisFile) {
        const optimizedSrcRaw = optimizedImages.filter(
          (i: OptimizedImage) => i.id === thisFile.id
        );
        const optimizedSrc = optimizedSrcRaw.at(0);
        thisFilesPayload.push(cleanFileDatum(thisFile, optimizedSrc?.src));
      }
    });
    if (thisFilesPayload.length)
      paneFileNodes.push({
        id: payload.id,
        files: thisFilesPayload,
      });
  });
const panesPayload: PaneDatumProps[] = allPanes
  .filter((payload: PaneDatum) => thisPanes?.includes(payload.id))
  .map((payload: PaneDatum) => {
    const thisFilesArray = paneFileNodes
      .filter((f: PaneFileNode) => f.id === payload.id)
      .at(0);
    return cleanPaneDatum(payload, thisFilesArray);
  });
const impressionsRaw = panesPayload
  .map((payload: PaneDatumProps) => {
    return cleanImpressionsDatum(payload.optionsPayload?.impressions);
  })
  .filter((e: ImpressionDatum | null) => e);
const impressions = impressionsRaw as ImpressionDatum[];

export const prerender = true;
---

<Layout
  title={title}
  pubDatetime={created || new Date()}
  modDatetime={changed || new Date()}
  ogImage={socialImagePath}
>
  <Header title={title || ``} menu={menu} slug={slug} />
  <main id="main-content">
    <StoryFragmentWrapper
      tailwindBgColour={tailwindBgColour}
      panes={panes || []}
      panesPayload={panesPayload}
      contentMap={contentMap}
      current={current}
    />

    <div class="my-6">
      {
        contentMap
          .filter(m => m.slug !== slug && m.type === `StoryFragment`)
          .map(m => (
            <a
              class="py-2 px-3 hover:text-blue-800"
              href={m.slug === import.meta.env.PUBLIC_HOME ? `/` : `/${m.slug}`}
            >
              {m.slug}
            </a>
          ))
      }
    </div>
  </main>
  {
    Object.keys(impressions).length ? (
      <ImpressionWrapper payload={impressions} />
    ) : null
  }
  <Footer created={created || new Date()} menu={menu} />
</Layout>

<script>
  import { handleResize } from "../utils/helpers";
  import { eventStream } from "../utils/events/eventStream";
  import { inView } from "../utils/events/inView";
  import { scrollToTop } from "../utils/scrollToTop";
  import { eventProcessQueue } from "../utils/events/eventProcessQueue";
  import { init } from "../utils/init";

  window.addEventListener(`resize`, handleResize);

  document.addEventListener("astro:page-load", () => {
    handleResize();
    eventStream();
    inView();
    scrollToTop();
    init();
  });
  document.addEventListener("astro:before-swap", () => eventProcessQueue());
</script>
