---
import ContextPaneWrapper from "@components/ContextPaneWrapper.astro";
import ImpressionWrapper from "@components/ImpressionWrapper";
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import { getImage } from "astro:assets";
import { cleanPaneDatum } from "../../utils/compositor/cleanPaneDatum";
import { cleanFileDatum } from "../../utils/compositor/cleanFileDatum";
import { cleanImpressionsDatum } from "../../utils/compositor/cleanImpressionsDatum";
import type {
  ImpressionDatum,
  PaneDatumProps,
  PaneFileNode,
  OptimizedImage,
  OptimizedImagePre,
  MarkdownFullDatum,
  ContentMap,
  FileNode,
  ContextPaneFullDatum,
  StylesVersion,
} from "../../types";

const stylesVerUrl = `${import.meta.env.PUBLIC_CONCIERGE_STYLES_URL}/v.json`;
const requestStyles: Response = await fetch(stylesVerUrl);
const stylesVer: StylesVersion =
  requestStyles.status === 404 ? 0 : await requestStyles.json();
const stylesUrl = `${import.meta.env.PUBLIC_CONCIERGE_STYLES_URL}/frontend.css?v=${stylesVer?.v || 0}`;

const { slug } = Astro.params;
const lookup = slug || import.meta.env.PUBLIC_HOME;
const url = `${Astro.url.origin}/api/contentMap.json`;
const request: Response = await fetch(url);
const contentMap: ContentMap[] =
  request.status === 404 ? [] : await request.json();
const id = contentMap.find(c => c.slug === lookup)?.id;
if (id === undefined) {
  throw new Error("Slug not found");
}
const urlDatum = `${Astro.url.origin}/api/context/${id}.json`;
const requestDatum: Response = await fetch(urlDatum);
const pane: ContextPaneFullDatum =
  requestDatum.status === 404 ? [] : await requestDatum.json();

const title = pane.title;
const created = new Date(pane.created);
const changed = new Date(pane.changed);

// optimize images
const optimizedImagesPre: OptimizedImagePre[] = [];
const p = pane;
const markdownFiles =
  p?.field_markdown
    .map((m: MarkdownFullDatum) => {
      let val: FileNode[] = [];
      if (typeof m.field_image === `object`) val = val.concat(m.field_image);
      if (typeof m.field_image_svg === `object`)
        val = val.concat(m.field_image_svg);
      return val;
    })
    .at(0) || [];
let paneFiles: FileNode[] = [];
if (typeof p.field_image === `object`)
  paneFiles = paneFiles.concat(p.field_image);
if (typeof p.field_image_svg === `object`)
  paneFiles = paneFiles.concat(p.field_image_svg);
const allFiles = [...markdownFiles, ...paneFiles];
allFiles?.forEach((f: FileNode) => {
  const thisFile = f;
  if (
    thisFile &&
    !optimizedImagesPre.filter((i: OptimizedImagePre) => i.id === thisFile.id)
      .length
  )
    optimizedImagesPre.push({
      id: thisFile.id,
      filename: thisFile.filename,
      url: thisFile.uri.url,
    });
});
async function getOptimizedImage(src: string) {
  try {
    const img = await getImage({
      src,
      inferSize: true,
    });
    return img.src;
  } catch {
    console.log(`error`);
    return null;
  }
}
const optimizedImages: OptimizedImage[] = await Promise.all(
  optimizedImagesPre.map(async (i: OptimizedImagePre) => {
    const src = `${import.meta.env.PUBLIC_IMAGE_URL}${i.url}`;
    const optimized = await getOptimizedImage(src);
    if (optimized) {
      const val = { id: i.id, src: optimized };
      return val as OptimizedImage;
    }
    return { id: `404`, src: `` };
  })
);
const paneFileNodes: PaneFileNode[] = [];
const payload = pane;
const thisFilesPayload: FileNode[] = [];
allFiles?.forEach((f: FileNode) => {
  const thisFile: FileNode = f;
  if (thisFile) {
    const optimizedSrc = optimizedImages.find(
      (o: OptimizedImage) => o.id === thisFile.id
    );
    if (optimizedSrc)
      thisFilesPayload.push(cleanFileDatum(thisFile, optimizedSrc.src));
  }
});
if (thisFilesPayload.length)
  paneFileNodes.push({
    id: payload.id,
    files: thisFilesPayload,
  });
const thisFilesArray = paneFileNodes
  .filter((f: PaneFileNode) => f.id === pane.id)
  .at(0);
const panePayload: PaneDatumProps = cleanPaneDatum(pane, thisFilesArray);
const impressionsRaw = panePayload
  ? cleanImpressionsDatum(panePayload.optionsPayload?.impressions)
  : null;
const impressions = impressionsRaw
  ? [impressionsRaw]
  : ([] as ImpressionDatum[]);

const current = {
  id,
  slug: slug || `404`,
  title,
};
---

<Layout
  title={title}
  pubDatetime={created || new Date()}
  modDatetime={changed || new Date()}
  stylesUrl={stylesUrl}
>
  <Header title={title || ``} slug="context" impressions={impressions} />
  <main id="main-content">
    <ContextPaneWrapper
      pane={panePayload}
      contentMap={contentMap}
      current={current}
    />
  </main>
  {
    impressions?.length ? (
      <ImpressionWrapper payload={impressions} client:load />
    ) : null
  }
  <Footer created={created || new Date()} />
</Layout>
