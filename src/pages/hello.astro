---
import {
  getAllStoryFragments,
  getStoryFragmentDatum,
  getAllTractStacks,
  getAllPaneFullDatum,
  getTractStack,
  getMarkdown,
  getAllMarkdowns,
  getAllMenus,
  getMenu,
  getAllResources,
  getResource,
  getAllFiles,
  getFile,
} from "../api/drupal";
import { ulid } from "ulid";

import { createClient } from "@libsql/client/web";

//const uuidToUlidMap = new Map<string, string>();

// from last run --- turso.tractstack.com
const uuidToUlidMap = new Map<string, string>([
  ["792591d0-e19e-4e08-830d-d49f02b446e7", "01J24G5GNMF8XT5TK68GAQEZVA"],
  ["55888ffb-2edf-47c0-b659-f7443c513fc9", "01J24G5GNNF6K51NBWX2GNRRHW"],
  ["20a8e8c8-89b2-45b7-bd55-c3a07bfe56a8", "01J24G5GNN5PEZZR54D20XW4R4"],
  ["bf122f39-a91b-4c1e-97ee-75e53f7a50fb", "01J24G5GNN9HKR2CHY9F4KYKQC"],
  ["8c3e1bc5-f986-4426-8177-39cbfd541d03", "01J24G5GNNZ9J694FKCYTFKPGX"],
  ["c8232957-f74f-4033-a1d7-c64c12c07556", "01J24G5GNNAPNJDEBTPP2GRE0A"],
  ["5c7d57ad-bbb8-4292-b92f-78ec086fbcd5", "01J24G5GNNQP10JQJ8M83J3J3Y"],
  ["e0b69a44-7230-451d-9bf0-c9cfd364d096", "01J24G5GNNHX5VZRXZAGEWSDQB"],
  ["d0dbdc6a-b642-4739-84d9-4944ac9c4719", "01J24G5GNNFQW1DE38420E05E2"],
  ["2b693750-fb5a-421e-bc99-68e8219d9652", "01J24G5GNPGRJBS0ZKCAE656R5"],
  ["44936067-3c55-40c5-b6ad-1493bfa01a98", "01J24G5GNP5FP5WBFNKEY5WV51"],
  ["bf5e368b-3b9a-4011-a75f-2f53ea317cde", "01J24G5GNPR23E3Y9PDSC1V343"],
  ["f4cc513c-97ba-40af-bfb5-6c0a9a240bd1", "01J24G5GNPZ0KM3D15FNXEQD7V"],
  ["834be9de-af2f-430c-8e08-3640f7a23396", "01J24G5GNPDFEXTVTB4JX79Y4V"],
  ["c619080c-05ac-4176-86e6-8218b0970efb", "01J24G5GNP7YKV44Q2372RE4ZM"],
  ["f09e6639-069c-43fd-9037-800ecc5d669b", "01J24G5GNPMZC6KNCJ4TVPXDY9"],
  ["c5a217d7-047c-4aa5-abc3-391c1a2ed485", "01J24G5GNPS006YKR0W1CYMA09"],
  ["d2c6aa6a-3b1d-4ab5-b2f7-b0127a0d80ed", "01J24G5GNPWJ3VC4TZDQM162DF"],
  ["9a8b719d-fb39-4675-9cfa-20eb6f54981c", "01J24G5GNPRSTC3XPT1EWY6D94"],
  ["dd8243d1-8530-415f-ab9b-56003fdfabf1", "01J24G5GNPWPCNEX6SC02TV4DW"],
  ["58a9d317-c5a3-48c6-935c-cc54e8866d05", "01J24G5GNPT21D6Y6R36TZ6NS2"],
  ["8bb90dd4-b70a-4ec6-adb4-f320f9fb0c15", "01J24G5GNP9QJFJCAN8EQTEQBK"],
  ["e46baf86-8c89-430a-8916-032c78adc163", "01J24G5GNPDE264N2R02J92J7C"],
  ["0a0dce17-2a83-434d-b102-ad8f3aa520c3", "01J24G5GNPZ4GCH4FMWHXEFV0W"],
  ["c365c8e3-3e82-4952-8b77-d6f3791906db", "01J24G5GNQV841Z8F1BP99C53C"],
  ["83d6efd7-2cb4-4891-986e-eee724d24f19", "01J24GZ8Q3215FTP2HG8T63XZJ"],
  ["769f00e9-2bb5-43da-826d-2af73f69c930", "01J24GZ8Q4QN3DSRMRTMWFP02C"],
  ["5ee9c993-41be-4060-932a-c54babadd590", "01J24GZ8Q4H946Y3DV72CXFW4R"],
  ["1da4e93e-9224-4ce4-ab22-b33bb08f2a80", "01J24GZ8Q4ZW7JRWQQJKS054M5"],
  ["ed3f6a84-6178-45ad-922c-3b7b79503e3f", "01J24GZ8Q4FYVX1TH481KHAP2X"],
  ["dfe306b4-978c-4553-a50e-ee691a785d20", "01J24GZ8Q4AEHYWAB94NRJCZQ7"],
  ["0db7de57-efbc-4bb5-9ded-67a0333f8a73", "01J24GZ8Q4WEQ9FNWQ6033GYKX"],
  ["d566a79e-3563-4593-9c46-2dfebb2bc35f", "01J24GZ8Q5429BVP68NRK69JFF"],
  ["ff82de4d-2247-4df7-8e75-c3b6cf22fa88", "01J24GZ8Q5T723YAX0J107512W"],
  ["56d90f3f-d2e5-43bf-9916-fa14b588d97e", "01J24GZ8Q5ASFGAHC18V2PG457"],
  ["5f36057b-6180-4e86-b717-3b23eb500c71", "01J24GZ8Q53VRR3VQ3WAJGPYT9"],
  ["3cb64456-82db-4960-8a71-199842fad63d", "01J24GZ8Q5DNA68TD00JHTT4PF"],
  ["ead97f0a-e5a6-42f7-bffd-ae675983f14f", "01J24GZ8Q5TNBRGCMMD6CNH80R"],
  ["39e8809b-c816-42e5-9693-6a114b8ffc4b", "01J24GZ8Q5DJ8Y5YDVM8TVTXNS"],
  ["9cc9af7e-83df-4916-96bb-fda56b749ccd", "01J24GZ8Q5RMGS3GAF28WK90WB"],
  ["dd619423-7262-4801-bb7d-4705fde781e6", "01J24GZ8Q5DT278ACC24GAM5EF"],
  ["fe78ea22-203f-412d-8aeb-de45ed869db8", "01J24GZ8Q5EK1QEGT5XS7ZZZMN"],
  ["e9667bb8-f907-4184-90ac-5fe17541b076", "01J24GZ8Q6C70M68211S2HE39C"],
  ["46d15dc8-5b35-4d52-8f99-7e39988bab26", "01J24GZ8Q69BEV5T6ZBTWHPC7Z"],
  ["fee93e09-8498-4ed5-a232-e62c1797d779", "01J24GZ8Q6EJYEH445516VMHQ2"],
  ["08a5ef3d-17a6-4b54-b9ce-4bd55e17f241", "01J24GZ8Q6130Q6H4DC5MBTBPW"],
  ["22c35462-5850-4004-b758-f09baf4629db", "01J24GZ8Q66HA5X5V8AE8YVZDC"],
  ["286ef157-c150-48a4-bb9d-efda2304caa5", "01J24GZ8Q6P5R3Y3PQCG7RA494"],
  ["eefc635f-6da4-4bc9-acda-b75b02b14c62", "01J24GZ8Q6HM5HJWM7B5884SJ5"],
  ["fbc1c9f1-6bb1-47c1-91fc-ca1dce3ff1f4", "01J24GZ8Q6RVVQBWMFJR2RMCZA"],
  ["b5ffdde7-e232-49d0-857b-29abb4a5af9e", "01J24GZ8Q6MGDK81MC1VB6B2ED"],
  ["fe6c1d1a-805c-43b8-a4b1-cc692dc652c8", "01J24GZ8Q6YENEWYHF7B2BB0WD"],
  ["88840454-df5d-4a0e-b5ce-c67d9d3bcd21", "01J24GZ8Q6TZEQZ3DAP87TK6MJ"],
  ["e0bd2160-26fb-4a77-b181-3fd786429fb4", "01J24GZ8Q6GK7FEZK93SK84SBE"],
  ["f63da0eb-cd5d-4306-80b8-be9d6c064a62", "01J24GZ8Q68937W4GHJ6J96PWQ"],
  ["ada4a2b6-0593-41da-a8d2-01ceb89f9dd9", "01J24GZ8Q6PGC6FW4VD2ZEHST3"],
  ["adcf72e3-e179-421e-b9a8-cc5d32cf535c", "01J24GZ8Q683F0F7AAWHY3NGEF"],
  ["8ee61c0e-3aba-4b0f-9952-23519a98c497", "01J24GZ8Q7XM9A2DVBS9AG79NE"],
  ["bc3f8fb5-21e3-4662-af29-9f3421064c65", "01J24GZ8Q7KZNMC9J72P464NQ0"],
  ["8c71895b-729d-494a-8da9-7c99edd34ae0", "01J24GZ8Q7HDB5Z71SKPQ80TKW"],
  ["14107dba-b68a-4827-96e0-052777c485ad", "01J24GZ8Q74PFM1E6DZDRKRSGZ"],
  ["290cb5a2-c26a-4dec-a879-3774e3d9c568", "01J24GZ8Q7B1FJ0D6ZHDBHDJF6"],
  ["f3d02979-bdfe-4bfd-9ce8-08a3198d2ec1", "01J24GZ8Q79WENQV8V56NPQFXV"],
  ["f6fab1f4-9986-4f27-812e-05f325200ad2", "01J24GZ8Q78903C3QQPSRJHNSJ"],
  ["ebed09fc-d8e5-4e1e-8f34-f07811b014b6", "01J24GZ8Q7RJM79887CYYJWJWT"],
  ["094c158a-5417-4b7c-940f-cabbfac0e4cd", "01J24GZ8Q756FCHBHJ5EW3DJT6"],
  ["c5582231-be6d-4875-be08-abc672bf38bc", "01J24GZ8Q7TDG5B8V4F5K97EDK"],
  ["bf60a9ca-eb6e-419e-b03d-e9edb1b404b6", "01J24GZ8Q7A6QVDN4E88VVDQY7"],
  ["f30e77c4-f67c-4545-bef8-c399b3ac16c6", "01J24GZ8Q752S430SS6QA8C0DK"],
  ["587c3aef-2cc3-4bcf-ad40-a43054df372b", "01J24GZ8Q7YVQCYCHA3E76HEV5"],
  ["58e3fdf8-8e3d-4d22-81c2-fb55e5cf777c", "01J24GZ8Q7NZTER5YGGYMHMXTV"],
  ["4b26e361-0edc-4f17-9916-19d7fb62919c", "01J24GZ8Q7PZDE719K9BGMHKRG"],
  ["342c251d-b840-4a15-8e36-095fd16b8000", "01J24GZ8Q7AA42HJJNAMJCE1F9"],
  ["47e40a47-236a-4ea0-b799-6edd830c6012", "01J24GZ8Q8Z7PEFCGPS2X6Q13Z"],
  ["d8eef8c4-120c-4a15-b4bb-b55ee0c42b33", "01J24GZ8Q80BPFQ267NAZ9P6WQ"],
  ["d1c14239-22f0-4548-bf52-8aa5222a7724", "01J24GZ8Q8ZWVV7YNTY1MWR7M9"],
  ["c1bf2732-010a-46ab-9794-ac5c02f2e090", "01J24GZ8Q8101JGVPJFV7F1P4K"],
  ["fff798b3-8215-4971-831c-ffefd8521b88", "01J24GZ8Q86ZT1055R5WSGHQKR"],
  ["bd9c84e8-953e-47b9-a667-4aa00c6ca572", "01J24GZ8Q8TEDK1H9CHHXB4NRM"],
  ["ae6001cb-1bce-480c-a747-37326c3e64a4", "01J24GZ8Q8255Q1X1WBBT4SFYK"],
  ["d89ff826-313e-4467-b808-a376ad39596f", "01J24GZ8Q84KAB0PXDKWE78PXG"],
  ["485a943e-15a2-493b-94a5-fef69d24d889", "01J24GZ8Q8GVYWE3056SYCHBGK"],
  ["156bd403-11d0-4feb-8c85-419ae0c079c1", "01J24GZ8Q8F4GPS5PNWNZDJTWF"],
  ["9c33825d-e6cf-43cc-a74c-9e6f7709a886", "01J24GZ8Q8TWPXYKDP7A2M42JY"],
  ["cbe44f45-fd38-4a09-87c2-11b5e63269b1", "01J24GZ8Q8WSMEFBKYGAW48N2T"],
  ["3de3e31a-6c3c-4ddc-bfc2-067afcdef582", "01J24GZ8Q8S7MJYZPRFERHNTP6"],
  ["99869bb5-bc31-4dc7-8b63-3309c9c6a37e", "01J24GZ8Q8AH49RBXZSVVM8B7Z"],
  ["2d38fd04-9da5-4959-8c95-b5faaedca4a6", "01J24GZ8Q8VQMDYG79ZJRTKRRX"],
  ["e2a754c5-d9cf-454f-8905-287dcfecbb3d", "01J24GZ8Q8D5RGVYQ5WKXNGP6Q"],
  ["388df658-adc9-4590-99a2-150e12fddf87", "01J24GZ8Q8W7490N8W6EYN4EHW"],
  ["aebd5f4f-48d3-409e-bfca-5cb13e6ba5a4", "01J24GZ8Q9DQSEZT4D0HAH9JEW"],
  ["a77443b1-ad4f-4357-b1b7-ccbbf9bf14d5", "01J24GZ8Q9Q9NAQSPWHSQ9KR0W"],
  ["20df82c1-6ffc-47e6-beea-f5fa4d48f809", "01J24GZ8Q93B8BKX3VWHBNAGW0"],
  ["243f4776-bd43-4e06-90d6-a068c973ecf4", "01J24GZ8Q9WT6Y9SKMRFBST5TY"],
  ["e4f20214-f843-4781-9855-86bda4bd642a", "01J24GZ8Q918N8VJMFE26CRZPY"],
  ["5ab42ffb-1643-4e51-8045-72d79bfddbb9", "01J24GZ8Q9R8NAW53VTDX6NXYG"],
]);

function getOrCreateUlid(uuid: string): string {
  let existingUlid = uuidToUlidMap.get(uuid);
  if (!existingUlid) {
    existingUlid = ulid();
    console.log(`new mapping ${uuid} -> ${existingUlid}`);
    uuidToUlidMap.set(uuid, existingUlid);
  }
  return existingUlid;
}

export const turso = createClient({
  url: import.meta.env.TURSO_DATABASE_URL_HELLO,
  authToken: import.meta.env.TURSO_AUTH_TOKEN_HELLO,
});

// source data from Drupal

const allTractStacks = await getAllTractStacks();
const _tractstacks = await Promise.all(
  allTractStacks.map(async t => {
    const tractstack = await getTractStack(t.id);
    return tractstack;
  })
);
const tractstacks = _tractstacks.map(innerArray => innerArray[0]).flat() || [];
//console.log(tractstacks);

const files = await getAllFiles();
//console.log(files);

const allMenus = await getAllMenus();
const _menus = await Promise.all(
  allMenus.map(async m => {
    const menu = await getMenu(m.id);
    return menu;
  })
);
const menus = _menus.map(innerArray => innerArray[0]).flat() || [];
//console.log(menus);

const allResources = await getAllResources();
const _resources = await Promise.all(
  allResources.map(async r => {
    const resource = await getResource(r.id);
    return resource;
  })
);
const resources = _resources.map(innerArray => innerArray[0]).flat() || [];
//console.log(resources);

const allMarkdowns = await getAllMarkdowns();
const _markdowns = await Promise.all(
  allMarkdowns.map(async m => {
    const markdown = await getMarkdown(m.id);
    return markdown;
  })
);
const markdowns = _markdowns.map(innerArray => innerArray[0]).flat() || [];
//console.log(markdowns);

const allStoryFragments = await getAllStoryFragments();
const _storyfragments = await Promise.all(
  allStoryFragments.map(async s => {
    const storyfragment = await getStoryFragmentDatum(s.id);
    return storyfragment;
  })
);
const storyfragments =
  _storyfragments.map(innerArray => innerArray[0]).flat() || [];
//console.log(storyfragments);

const panes = await getAllPaneFullDatum();
//console.log(panes);

// Prepare initial records

const tractstacksData = tractstacks.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    title: s.title,
    slug: s.field_slug,
    social_image_path: s.field_social_image_path,
  };
});
//console.log(tractstacksData);

const storyfragmentsData = storyfragments.map(s => {
  const ulid = getOrCreateUlid(s.id);
  const menuId =
    (s?.field_menu?.id && getOrCreateUlid(s.field_menu.id)) || null;
  const tractStackId = getOrCreateUlid(s.field_tract_stack.id);
  return {
    id: ulid,
    title: s.title,
    slug: s.field_slug,
    social_image_path: s.field_social_image_path,
    tailwind_background_colour: s.field_tailwind_background_colour,
    created: new Date(s.created).toISOString().slice(0, 19).replace("T", " "),
    changed:
      (s.changed &&
        new Date(s.changed).toISOString().slice(0, 19).replace("T", " ")) ||
      null,
    menu_id: menuId,
    tractstack_id: tractStackId,
  };
});
//console.log(storyfragmentsData);

const panesData = panes.map(s => {
  const ulid = getOrCreateUlid(s.id);
  const thisMarkdown = s.field_markdown.at(0);
  const markdownId =
    (thisMarkdown?.id && getOrCreateUlid(thisMarkdown.id)) || null;
  const tempVal = s?.field_options && JSON.parse(s.field_options);
  const fragments = tempVal.paneFragmentsPayload;
  tempVal.paneFragmentsPayload = fragments?.map(f => {
    const newVal = f;
    delete newVal.id;
    delete newVal.markdownId;
    if (newVal?.optionsPayload?.classNamesPayload?.toggle)
      delete newVal.optionsPayload.classNamesPayload.toggle;
    if (newVal?.optionsPayload?.classNamesPayload?.imageContainer)
      delete newVal.optionsPayload.classNamesPayload.imageContainer;
    newVal.type = newVal.internal.type;
    delete newVal.internal.type;
    delete newVal.internal;
    //if (newVal?.optionsPayload?.classNamesPayload?.parent?.classes) {
    //  console.log(`<parent>`);
    //  console.log(newVal.optionsPayload.classNamesPayload.parent.classes);
    //}
    //if (newVal?.optionsPayload?.classNamesPayload?.p?.classes) {
    //  console.log(`<p>`);
    //  console.log(newVal.optionsPayload.classNamesPayload.p.classes);
    //}
    //if (newVal?.optionsPayload?.classNamesPayload?.h2?.classes) {
    //  console.log(`<h2>`);
    //  console.log(newVal.optionsPayload.classNamesPayload.h2.classes);
    //}
    //console.log(``);
    //console.log(newVal);
    return newVal;
  });
  tempVal.impressions =
    tempVal?.impressions &&
    Object.keys(tempVal.impressions).map(i => {
      const tempI = tempVal.impressions[i];
      delete tempI.id;
      tempI.parentId = getOrCreateUlid(tempI.parentId);
      return tempI;
    });
  if (typeof tempVal.impressions === `undefined`) delete tempVal.impressions;
  if (typeof tempVal.paneFragmentsPayload === `undefined`)
    delete tempVal.paneFragmentsPayload;
  return {
    id: ulid,
    title: s.title,
    slug: s.field_slug,
    created: new Date(s.created).toISOString().slice(0, 19).replace("T", " "),
    changed:
      (s.changed &&
        new Date(s.changed).toISOString().slice(0, 19).replace("T", " ")) ||
      null,
    is_context_pane: s.field_is_context_pane,
    markdown_id: markdownId,
    options_payload: (s?.field_options && JSON.stringify(tempVal)) || `{}`,
    height_offset_desktop: s.field_height_offset_desktop,
    height_offset_tablet: s.field_height_offset_tablet,
    height_offset_mobile: s.field_height_offset_mobile,
    height_ratio_desktop: s.field_height_ratio_desktop,
    height_ratio_tablet: s.field_height_ratio_tablet,
    height_ratio_mobile: s.field_height_ratio_mobile,
  };
});
//console.log(panesData);

const resourcesData = resources.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    title: s.title,
    slug: s.field_slug,
    category_slug: s.field_category_slug,
    oneliner: s.field_oneliner,
    options_payload: s.field_options,
    action_lisp: s.field_action_lisp,
  };
});
//console.log(resourcesData);

const markdownsData = markdowns.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    body: s.field_markdown_body,
  };
});
//console.log(markdownsData);

const currentDate = new Date();
const formattedDate = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, "0")}`;
const filesData = files.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    filename: s.filename,
    url: `/custom/images/${formattedDate}/${s.filename}`,
  };
});
//console.log(filesData);

const menusData = menus.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    title: s.title,
    theme: s.field_theme,
    options_payload: s.field_options,
  };
});
//console.log(menusData);

const storyfragmentsPanesData = storyfragments.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    paneIds: s.field_panes.map(t => getOrCreateUlid(t.id)),
  };
});
//console.log(storyfragmentsPanesData);

const filesPanesData = panes
  .map(s => {
    const ulid = getOrCreateUlid(s.id);
    const images = s.field_image.map(t => getOrCreateUlid(t.id));
    const svgs = s.field_image_svg.map(t => getOrCreateUlid(t.id));
    if (images.length || svgs.length)
      return {
        id: ulid,
        images,
        svgs,
      };
    else return null;
  })
  .filter(n => n);
//console.log(filesPanesData);

const filesMarkdownsData = markdowns
  .map(s => {
    const ulid = getOrCreateUlid(s.id);
    const images = s.field_image.map(t => getOrCreateUlid(t.id));
    const svgs = s.field_image_svg.map(t => getOrCreateUlid(t.id));
    if (images.length || svgs.length)
      return {
        id: ulid,
        images,
        svgs,
      };
    else return null;
  })
  .filter(n => n);
//console.log(filesMarkdownsData);

// must init database

try {
  await turso.execute(`
  PRAGMA foreign_keys = OFF;`);
  await turso.execute(`DROP TABLE IF EXISTS storyfragment_pane;`);
  await turso.execute(`DROP TABLE IF EXISTS file_pane;`);
  await turso.execute(`DROP TABLE IF EXISTS file_markdown;`);
  await turso.execute(`DROP TABLE IF EXISTS pane;`);
  await turso.execute(`DROP TABLE IF EXISTS storyfragment;`);
  await turso.execute(`DROP TABLE IF EXISTS markdown;`);
  await turso.execute(`DROP TABLE IF EXISTS file;`);
  await turso.execute(`DROP TABLE IF EXISTS resource;`);
  await turso.execute(`DROP TABLE IF EXISTS menu;`);
  await turso.execute(`DROP TABLE IF EXISTS tractstack;`);
  await turso.execute(`
  PRAGMA foreign_keys = ON;
`);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS tractstack (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        slug TEXT NOT NULL UNIQUE,
        social_image_path TEXT
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS menu (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        theme TEXT NOT NULL,
        options_payload TEXT NOT NULL
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS resource (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        slug TEXT NOT NULL UNIQUE,
        category_slug TEXT,
        oneliner TEXT NOT NULL,
        options_payload TEXT NOT NULL,
        action_lisp TEXT
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS file (
        id TEXT PRIMARY KEY,
        filename TEXT NOT NULL,
        alt_description TEXT NOT NULL,
        url TEXT NOT NULL
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS markdown (
        id TEXT PRIMARY KEY,
        body TEXT NOT NULL
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS storyfragment (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        slug TEXT NOT NULL UNIQUE,
        social_image_path TEXT,
        tailwind_background_colour TEXT,
        created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        changed TIMESTAMP,
        menu_id TEXT REFERENCES menu(id),
        tractstack_id TEXT NOT NULL REFERENCES tractstack(id)
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS pane (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        slug TEXT NOT NULL UNIQUE,
        created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        changed TIMESTAMP,
        markdown_id TEXT REFERENCES markdown(id),
        options_payload TEXT NOT NULL,
        is_context_pane BOOLEAN DEFAULT 0,
        height_offset_desktop INTEGER,
        height_offset_mobile INTEGER,
        height_offset_tablet INTEGER,
        height_ratio_desktop TEXT,
        height_ratio_mobile TEXT,
        height_ratio_tablet TEXT
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS storyfragment_pane (
        id TEXT PRIMARY KEY,
        storyfragment_id TEXT NOT NULL REFERENCES storyfragment(id),
        pane_id TEXT NOT NULL REFERENCES pane(id),
        weight INTEGER NOT NULL
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS file_pane (
        id TEXT PRIMARY KEY,
        file_id TEXT NOT NULL REFERENCES file(id),
        pane_id TEXT NOT NULL REFERENCES pane(id)
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS file_markdown (
        id TEXT PRIMARY KEY,
        file_id TEXT NOT NULL REFERENCES file(id),
        markdown_id TEXT NOT NULL REFERENCES markdown(id)
      )
    `);

  // Insert initial records

  for (const resource of resourcesData) {
    await turso.execute({
      sql: "INSERT INTO resource (id,title,slug,category_slug,oneliner,options_payload,action_lisp) VALUES (?, ?,?,?,?,?,?)",
      args: [
        resource.id,
        resource.title,
        resource.slug,
        resource.category_slug,
        resource.oneliner,
        resource.options_payload,
        resource.action_lisp,
      ],
    });
  }

  for (const menu of menusData) {
    await turso.execute({
      sql: "INSERT INTO menu (id,title,theme,options_payload) VALUES (?,?,?,?)",
      args: [menu.id, menu.title, menu.theme, menu.options_payload],
    });
  }

  for (const file of filesData) {
    await turso.execute({
      sql: "INSERT INTO file (id,filename,url) VALUES (?,?,?)",
      args: [file.id, file.filename, file.url],
    });
  }

  for (const markdown of markdownsData) {
    await turso.execute({
      sql: "INSERT INTO markdown (id,body) VALUES (?,?)",
      args: [markdown.id, markdown.body],
    });
  }

  for (const tractstack of tractstacksData) {
    await turso.execute({
      sql: "INSERT INTO tractstack (id,title,slug,social_image_path) VALUES (?,?,?,?)",
      args: [
        tractstack.id,
        tractstack.title,
        tractstack.slug,
        tractstack.social_image_path,
      ],
    });
  }

  for (const storyfragment of storyfragmentsData) {
    await turso.execute({
      sql: "INSERT INTO storyfragment (id,title,slug,social_image_path,tailwind_background_colour,created,changed,menu_id,tractstack_id) VALUES (?,?,?,?,?,?,?,?,?)",
      args: [
        storyfragment.id,
        storyfragment.title,
        storyfragment.slug,
        storyfragment.social_image_path,
        storyfragment.tailwind_background_colour,
        storyfragment.created,
        storyfragment.changed,
        storyfragment.menu_id,
        storyfragment.tractstack_id,
      ],
    });
  }

  for (const pane of panesData) {
    await turso.execute({
      sql: "INSERT INTO pane (id,title,slug,created,changed,markdown_id,options_payload,is_context_pane,height_offset_desktop,height_offset_tablet,height_offset_mobile,height_ratio_desktop,height_ratio_tablet,height_ratio_mobile) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
      args: [
        pane.id,
        pane.title,
        pane.slug,
        pane.created,
        pane.changed,
        pane.markdown_id,
        pane.options_payload,
        pane.is_context_pane,
        pane.height_offset_desktop,
        pane.height_offset_tablet,
        pane.height_offset_mobile,
        pane.height_ratio_desktop,
        pane.height_ratio_tablet,
        pane.height_ratio_mobile,
      ],
    });
  }

  for (const fileMarkdown of filesMarkdownsData) {
    for (const imageId of fileMarkdown.images) {
      const thisUlid = ulid();
      await turso.execute({
        sql: "INSERT INTO file_markdown (id,file_id,markdown_id) VALUES (?,?,?)",
        args: [thisUlid, imageId, fileMarkdown.id],
      });
    }
    for (const imageId of fileMarkdown.svgs) {
      const thisUlid = ulid();
      await turso.execute({
        sql: "INSERT INTO file_markdown (id,file_id,markdown_id) VALUES (?,?,?)",
        args: [thisUlid, imageId, fileMarkdown.id],
      });
    }
  }

  for (const filePane of filesPanesData) {
    for (const imageId of filePane.images) {
      const thisUlid = ulid();
      await turso.execute({
        sql: "INSERT INTO file_pane (id,file_id,pane_id) VALUES (?,?,?)",
        args: [thisUlid, imageId, filePane.id],
      });
    }
    for (const imageId of fileMarkdown.svgs) {
      const thisUlid = ulid();
      await turso.execute({
        sql: "INSERT INTO file_pane (id,file_id,pane_id) VALUES (?,?,?)",
        args: [thisUlid, imageId, filePane.id],
      });
    }
  }

  for (const storyfragmentPane of storyfragmentsPanesData) {
    let weight = 1;
    for (const paneId of storyfragmentPane.paneIds) {
      const thisUlid = ulid();
      await turso.execute({
        sql: "INSERT INTO storyfragment_pane (id, storyfragment_id, pane_id, weight) VALUES (?, ?, ?, ?)",
        args: [thisUlid, storyfragmentPane.id, paneId, weight],
      });
      weight++;
    }
  }
} catch (error) {
  console.error("Error accessing Turso database:", error);
}
console.log(uuidToUlidMap);
---

<h2>push data to Turso</h2>
<br />
<h3>Tract Stacks by uuid</h3>
<ul>
  {tractstacks.map(n => <li>{n.id}</li>)}
  {!tractstacks.length ? <li>none</li> : null}
</ul>
<br />
<h3>Story Fragments by uuid</h3>
<ul>
  {storyfragments.map(n => <li>{n.id}</li>)}
  {!storyfragments.length ? <li>none</li> : null}
</ul>
<br />
<h3>Panes by uuid</h3>
<ul>
  {panes.map(n => <li>{n.id}</li>)}
  {!panes.length ? <li>none</li> : null}
</ul>
<br />
<h3>Markdowns by uuid</h3>
<ul>
  {markdowns.map(n => <li>{n.id}</li>)}
  {!markdowns.length ? <li>none</li> : null}
</ul>
<br />
<h3>Files by uuid</h3>
<ul>
  {files.map(n => <li>{n.id}</li>)}
  {!files.length ? <li>none</li> : null}
</ul>
<br />
<h3>Resources by uuid</h3>
<ul>
  {resources.map(n => <li>{n.id}</li>)}
  {!resources.length ? <li>none</li> : null}
</ul>
<br />
<h3>Menus by uuid</h3>
<ul>
  {menus.map(n => <li>{n.id}</li>)}
  {!menus.length ? <li>none</li> : null}
</ul>
<br />
