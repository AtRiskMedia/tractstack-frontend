---
import {
  getAllStoryFragments,
  getStoryFragmentDatum,
  getAllTractStacks,
  getAllPaneFullDatum,
  getTractStack,
  getMarkdown,
  getAllMarkdowns,
  getAllMenus,
  getMenu,
  getAllResources,
  getResource,
  getAllFiles,
  getFile,
} from "../api/drupal";
import { ulid } from "ulid";

import { createClient } from "@libsql/client/web";

//const uuidToUlidMap = new Map<string, string>();

// from last run --- turso.tractstack.com
const uuidToUlidMap = new Map<string, string>([
  ["6f693958-75ae-4802-b25d-89bcf17e842d", "01J24H683CGBS4GV1YWBFJD1YY"],
  ["754f9c7d-a542-44b8-8b7f-ba310c7b9dd5", "01J24H683D6GT6QZVDJDZ6CG4Q"],
  ["c3f23ec4-6a61-4494-9a0c-a7885cde7b88", "01J24H683DP1MX9FQVEYVAS2BP"],
  ["64f9dbe9-422d-4ecc-ae16-649152ea20a6", "01J24H683EXW4X6AH9J2668MVD"],
  ["82f4c8b1-6c4e-43a3-9f1e-d494d9d11f69", "01J24H683ER3ZWPAQXSR23T78Z"],
  ["37ea58d4-d658-4f66-82d5-7e53d240bb28", "01J24H683EAP5FD19YEZYEDAEA"],
  ["52462ee7-0933-491a-bb69-155ed56b985d", "01J24H683E75VXN65W2JMVCBD2"],
  ["dad0f3ba-6ee9-4b55-ae75-9e9698e58b47", "01J24H683ESDDBR24Q3WBQMQ04"],
  ["2fbdb919-ba3f-4a03-a735-95955aae6fa3", "01J24H683FAVZWCZYJQZZP2YFQ"],
  ["c5df7fb1-5efc-445b-9fb8-9b4f80b7a9b4", "01J24H683F25PXRMKC0514QT1R"],
  ["f9155d2e-4839-41e2-93f8-82c27ef904e1", "01J24H683FTP86JYE6T1V79BNW"],
  ["91786c2a-0031-43dc-a9d9-ed24e541938a", "01J24H683F0G2ESCGFS435A63Y"],
  ["bb541acb-83df-4d27-91a1-6088cfd051a7", "01J24H683FZ5N4Y333HX3PXN21"],
  ["5df34fa6-053f-4349-abd9-6f334fabf0a8", "01J24H683F4A1PM4EZRGS4R0K9"],
  ["90d13983-6da5-4b66-a571-c587f09dfd42", "01J24H683G3PAHQ4XEGJ8HPBAW"],
  ["2c5f51c2-96a2-49f5-829b-6bf9bd834a17", "01J24H683GMPY73YYHNW7NDW29"],
  ["020c8a02-b7c0-46ed-b944-96470f0202c9", "01J24H683G4T9EWCFG2G0NHR00"],
  ["e6019315-7f7e-4a9b-b9ed-5e99cdba478a", "01J24H683G4NFKAYT8X2A1Y9JK"],
  ["dcd8d897-b0c6-4e4e-9ed1-397a39dfc0cd", "01J24H683HGMBV3PT85EMTAZ5Z"],
  ["cb962a8c-6374-408e-a954-7c81cbf3212e", "01J24H683H4V0GTSSBFN61VS5W"],
  ["a980f03b-b857-43f5-9c10-de2ed915a1fe", "01J24H683HJQXRXQXZZFPWRQFE"],
  ["e4ebd256-7755-4150-b204-0290535707d8", "01J24H683HGRSFS8YMN4J90FHS"],
  ["b49c10d9-e58b-4b41-b589-fca0222a1853", "01J24H683HJQ7XFQ3M4V7BDB8R"],
  ["ef276cb5-1e8a-43e8-a347-4c15a0b47ea7", "01J24H683H092F1VZAT7TVB9HM"],
  ["e4701092-9d73-41c2-8f3d-cef9931aa4df", "01J24H683JB87C72DR56Z7DFX2"],
  ["1f7de503-14a5-4b96-9282-74377b40a7e8", "01J24H683JA6DP0S5A76Z9123R"],
  ["dfc20dea-2a1f-4a47-9673-413a388ced7b", "01J24H683J90D7M515FA8T4VB5"],
  ["c15dc43a-ed3c-41bc-a680-ca32e4101b75", "01J24H683JBQXX3PT0DB0NMMRB"],
  ["71337d29-32c5-4585-88c3-a7999ee29a0f", "01J24H683JDYN9FCF5ZXMXJN3D"],
  ["2261fbe0-9718-4741-8bc2-ed7b092064c6", "01J24H683J4818K7BE1X3AM78N"],
  ["b1fd6f63-b739-4fce-b9ac-7e8b22dd8ecc", "01J24H683KJ8N55A3S3FMNKH4F"],
  ["fa323a17-fee6-4da1-8b1e-ea693cd8f109", "01J24H683KZWBCDPRVB42MSDZ6"],
  ["e8ad29e6-2e98-4f8a-8ee3-a1d8737da4ee", "01J24H683K5T7QN6YAP1K5V112"],
  ["e032aa11-7559-492f-a6f0-c51fbccabfea", "01J24H683KFPJ28G06NX335BBT"],
  ["cbd05fae-dab3-422a-af6a-39c5e841fd62", "01J24H683KC0KZV07Q69831MS8"],
  ["c43df7f4-2844-444a-9f18-cd97a0b7f9c1", "01J24H683KGBDAVJY1KWT42HXT"],
  ["2ce55858-54ec-42cb-ab94-91562569c88d", "01J24H683KNZ306FBDBDDF0CFN"],
  ["cc760c3d-3ec0-4430-b900-5403f1a811f6", "01J24H683KXTKNJQT3H83SYZBZ"],
  ["f8401317-b522-4181-b806-59f662e820bb", "01J24H683KTKXDN180TG67Q5MW"],
  ["c2deadd9-9159-4a58-8344-7939c81f0d54", "01J24H683MF28RZ9SSW5N48AYH"],
  ["4cd0367e-9523-41dc-947a-db8dae457d04", "01J24H683MSXKG6RGFRC581R0B"],
  ["81a6d061-8ea9-4472-b482-c9413b6a38e9", "01J24H683MHXSRVGGTQ3E3R88A"],
  ["6164bdb9-9bed-4439-adcd-491a7a1a5085", "01J24H683M5ND4WM8AEJW6TWP3"],
  ["83942c31-ad49-4004-a740-40b6dd5ff687", "01J24H683MNAZAB0FHENFBBT67"],
  ["10c19836-1825-4b92-ae2a-acf5beafb855", "01J24H683MGQ5STFFVHYNVKVAY"],
  ["99299ca5-47e2-4ed4-82b2-648f5d3f13d2", "01J24H683M4G2M76S0CTD06V37"],
  ["35c12d58-0e01-42e0-88b3-0eecfb56d2d1", "01J24H683M3KN06JSA6QYB4AFV"],
  ["8de9c93e-33c8-4760-a983-2ee7b9af2182", "01J24H683M08HDW7C6Z8B2H5F2"],
  ["a508d04e-a417-4ea4-889a-de9ebf0a77bb", "01J24H683MGGE32H9DYA4R1ZW9"],
  ["5044c79e-7b34-4246-b47e-4f2c283bc87f", "01J24H683MNATRZY3XH443460M"],
  ["cc824168-e608-4e8c-9317-c5307cc7920b", "01J24H683MJAG55Z99ST8PW9W5"],
  ["93557950-bac1-4fb4-98d8-4bc128fb136d", "01J24H683N4DAWSV24CR4D6KJJ"],
  ["fe7467c0-a60e-47fc-bfdc-4002aac0ebf2", "01J24H683ND0WGN0RTR0FHZT72"],
  ["c6219630-1692-4682-88e8-11aff220006f", "01J24H683NZK47PW3ZBK42NKSG"],
  ["a12d9b34-40de-4134-8dc7-1ab1ec53833d", "01J24H683NKQJ6M3SY4K2WGFKF"],
  ["5d812443-a227-4636-9e15-e88665d2db7e", "01J24H683N4KPXX553R8M1QTGF"],
  ["31d7e478-4d62-4998-9775-4692bb780ab6", "01J24H683NCAC24WX8RN69DF8N"],
  ["d8406675-87d7-4afe-94b3-f7c95ed54c78", "01J24H683NR154F26SRG25CPGW"],
  ["d7e8b6a9-657f-414a-9b47-2897789a5005", "01J24H683N2HH1AJH1N3Z4EAW7"],
  ["c1bf91d7-94a6-4829-83d8-10c2f2aef76d", "01J24H683NPMBEG0C1EHB97F0W"],
  ["4c29137b-7e56-401c-a56a-05aefc4abe7b", "01J24H683N1NWPTXWVSJHSSNSM"],
  ["c9005024-6f2c-4d46-b3f0-91be456e97d7", "01J24H683NDQCT9W07RK3AK1YH"],
  ["a76775c4-5596-4dc2-b648-c6da08edf272", "01J24H683PCS8ZYRT75RYWJ0N9"],
  ["2c86a31e-0384-485e-8729-24360e995647", "01J24H683PFSTC576DGKFTRVVR"],
  ["ffe617e9-8b5b-4391-a332-9a910254cd4a", "01J24H683PKDKNCDEHWZ7EP9QT"],
  ["ff060d12-42fc-460c-af2e-3bad5cab446d", "01J24H683PRC205DQTHB2TGFRK"],
  ["a36eb395-2403-48ed-85e1-5a53df575d79", "01J24H683PQJEMPKDXSZK4YHYF"],
  ["ebfa52a7-a406-451a-b08c-d7ec1d2fa8b4", "01J24H683P47F633F3XBCCP6SM"],
  ["bb385dad-e900-4ad0-8505-3fca99508296", "01J24H683PXJNZYCYPRWGVXB49"],
  ["48708d27-ac6c-4549-b6dc-484effe3fbd5", "01J24H683PMND20FVBD9BSA7B1"],
  ["3956cb20-9553-4183-9f92-6ad1fb60c82d", "01J3PAAKW835VQ6DQEH07WXJMB"],
  ["cac34bcd-82a4-4cfd-83a8-518269ca7410", "01J3PAAKWB906H86DV1R295CVB"],
  ["2eb831cf-fe10-43b4-8fe2-343c3ae683d1", "01J3PAAKWBY9CF2PSC03AM86HB"],
  ["a8555fc1-d50e-4a9c-b68c-015f64496d5f", "01J3PAAKWBBDJH08T2HWNVNVTB"],
  ["1213376e-30aa-4dc7-add1-ff5e012754c8", "01J3PAAKWBJCAS002ERRWB2H8B"],
  ["da2af936-d81b-41cb-8de7-6fef3ddb122e", "01J3PAAKWCVP2DG253F45A4Y2B"],
  ["4c4b7505-9729-41b4-ae02-510fc96cbf2c", "01J3PAAKWC3DNDTGYXYK9CD4MB"],
  ["6819666e-6a5f-4d11-9405-18c8f59c495a", "01J45WMDQDTFHFHDBBYW25WX62"],
  ["ea6e790e-8494-4668-a382-6d374c33a74f", "01J45WMDQFFQT1NCXHV1GB32G4"],
  ["254b2461-1868-41d7-b723-39669b2e6d95", "01J45WMDQFVZDEC6F06GEE97X6"],
  ["271a5732-4e21-4450-a7b2-37b233dd234d", "01J45WMDQFBEDKRC2X4CPQKR3C"],
  ["bd8f7357-13ca-4d85-95c5-ff2610eba583", "01J45WMDQFQG7CTK1MC7WJ45FY"],
  ["0098a65b-5374-40a5-9f15-c788bb4a9e69", "01J5BCGQ9BYA3YZD86JET6TQHH"],
  ["0c7ddd80-f0dd-4635-a5a8-07c0035a73fe", "01J5BCGQ9FHPMRTHNP2AD28326"],
  ["ecab70ce-2bcd-415a-b47c-49d4ba0897e5", "01J5BCGQ9FRM1CM966BP4YVQ5W"],
  ["10a3a7cd-47a8-41fe-adf2-ef3789a59f51", "01J5BCGQ9FAZ1BPD9NQSJM13C4"],
  ["c6e5fc5f-8449-472c-a62b-c53bb4849b3b", "01J5BCGQ9FFEZZDBZF95WF20BA"],
  ["758b2a0d-ea11-43f2-8b5d-e97960896007", "01J66BY9Q6FDQEVHSEPQT0YTCG"],
  ["c72e228e-48c3-4715-9945-903e64648f1e", "01J66BY9Q7J2GHGQ48S2TM1TZY"],
  ["87928950-b6f0-42fe-b607-0c799bef11ec", "01J6MWPR2WKMJQ80B89CF2RHXK"],
  ["0981ea2e-40ec-4981-aa8f-c32775c5be1e", "01J6MWPR2YB7FT6P1YX7KYEVG1"],
  ["41e32e8e-948f-42fd-90aa-630aebf529e4", "01J6MWPR30KWTRVNNMRPJMGDZ8"],
  ["e6662046-de32-4059-8ba3-3891383ad20e", "01J6MWPR31PVVNZS9JK89C9YZX"],
  ["ec0e5a6b-f899-482f-97de-c7a0d748a3d3", "01J6MWPR31QBSX5W5WGRN6XCPH"],
  ["2e3a228d-a3bd-4168-bb95-74813d43de88", "01J6MWPR31RGSV5D2YGEAVGFGG"],
  ["af114467-52ba-49c0-b69c-8215e0eb2064", "01J6MWPR312KXCT2WZME0NM1NN"],
  ["86122b69-6a59-4075-be85-8e683eb0e1f9", "01J6MWPR31303M6REGKQG3JAVD"],
  ["8b720a74-8676-40e4-ac40-d5451b55458e", "01J6MWPR31M7KMT0XZ5KG8N764"],
  ["cbd91f3c-b0f2-4b11-9005-5a2e612ea9fd", "01J6MWPR31TG3TXP1WXV3AV8ZQ"],
  ["923b98b3-9116-41d8-a461-eebe56dc25e9", "01J8FS9D198KHXGJXYZAT4PS8S"],
  ["f7385ba2-5dc9-49d0-b5fe-d70561e23932", "01J8FS9D19E9JSQ5YKZVK398HC"]
  ["7e932b8e-d098-4f5b-aa8c-fdf36b19e8f9", "01J91YBTVXN8MDGJ0VANHTG1G0"],
  ["33d9443e-4d94-4551-a646-5bf729dd6b00", "01J91YBTVY9HD60YTAH6XY2ZPY"],
  ["1d404095-2efb-4e00-8ddd-ac533cab0016", "01J91YBTW0H4Y79WRVT2E3X9HW"],
  ["66f66179-818a-4ebc-8665-483d08f007cc", "01J91YBTW0PV2S8E3376NPEWKP"],
  ["8f9b2d86-8b1b-4196-a875-6e89fceef544", "01J91YBTW191QHBA4XXMMBKV80"],
  ["0f042954-ad22-4602-85bd-084bd92142f3", "01J91YBTW1XY66XM7C8CQ69P24"],
  ["378d3f68-2e7b-4a90-9cf8-26dfe21dc433", "01J91YBTW1XKW7N3VZFPQCTYKX"],
  ["51604191-8fe5-4644-b008-c39b8f7aa25f", "01J91YBTW125NK6HMQ3KPFNZD9"],
  ["b91e5521-576d-4002-b9b8-424db0131953", "01J91YBTW1A75X0BKQPC4W5GTX"],
  ["643f50e3-b24a-4c15-876b-d70e6aa6e90f", "01J91YBTW1XGJ8G1W7HM9E4MY4"],
]);

function getOrCreateUlid(uuid: string): string {
  let existingUlid = uuidToUlidMap.get(uuid);
  if (!existingUlid) {
    existingUlid = ulid();
    console.log(`new mapping ${uuid} -> ${existingUlid}`);
    uuidToUlidMap.set(uuid, existingUlid);
  }
  return existingUlid;
}

export const turso = createClient({
  url: import.meta.env.TURSO_DATABASE_URL_TT,
  authToken: import.meta.env.TURSO_AUTH_TOKEN_TT,
});

// source data from Drupal

const allTractStacks = await getAllTractStacks();
const _tractstacks = await Promise.all(
  allTractStacks.map(async t => {
    const tractstack = await getTractStack(t.id);
    return tractstack;
  })
);
const tractstacks = _tractstacks.map(innerArray => innerArray[0]).flat() || [];
//console.log(tractstacks);

const files = await getAllFiles();
//console.log(files);

const allMenus = await getAllMenus();
const _menus = await Promise.all(
  allMenus.map(async m => {
    const menu = await getMenu(m.id);
    return menu;
  })
);
const menus = _menus.map(innerArray => innerArray[0]).flat() || [];
//console.log(menus);

const allResources = await getAllResources();
const _resources = await Promise.all(
  allResources.map(async r => {
    const resource = await getResource(r.id);
    return resource;
  })
);
const resources = _resources.map(innerArray => innerArray[0]).flat() || [];
//console.log(resources);

const allMarkdowns = await getAllMarkdowns();
const _markdowns = await Promise.all(
  allMarkdowns.map(async m => {
    const markdown = await getMarkdown(m.id);
    return markdown;
  })
);
const markdowns = _markdowns.map(innerArray => innerArray[0]).flat() || [];
//console.log(markdowns);

const allStoryFragments = await getAllStoryFragments();
const _storyfragments = await Promise.all(
  allStoryFragments.map(async s => {
    const storyfragment = await getStoryFragmentDatum(s.id);
    return storyfragment;
  })
);
const storyfragments =
  _storyfragments.map(innerArray => innerArray[0]).flat() || [];
//console.log(storyfragments);

const panes = await getAllPaneFullDatum();
//console.log(panes);

// Prepare initial records

const tractstacksData = tractstacks.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    title: s.title,
    slug: s.field_slug,
    social_image_path: s.field_social_image_path,
  };
});
//console.log(tractstacksData);

const storyfragmentsData = storyfragments.map(s => {
  const ulid = getOrCreateUlid(s.id);
  const menuId =
    (s?.field_menu?.id && getOrCreateUlid(s.field_menu.id)) || null;
  const tractStackId = getOrCreateUlid(s.field_tract_stack.id);
  return {
    id: ulid,
    title: s.title,
    slug: s.field_slug,
    social_image_path: s.field_social_image_path,
    tailwind_background_colour: s.field_tailwind_background_colour,
    created: new Date(s.created).toISOString().slice(0, 19).replace("T", " "),
    changed:
      (s.changed &&
        new Date(s.changed).toISOString().slice(0, 19).replace("T", " ")) ||
      null,
    menu_id: menuId,
    tractstack_id: tractStackId,
  };
});
//console.log(storyfragmentsData);

const panesData = panes.map(s => {
  const ulid = getOrCreateUlid(s.id);
  const thisMarkdown = s.field_markdown.at(0);
  const markdownId =
    (thisMarkdown?.id && getOrCreateUlid(thisMarkdown.id)) || null;
  const tempVal = s?.field_options && JSON.parse(s.field_options);
  const fragments = tempVal.paneFragmentsPayload;
  tempVal.paneFragmentsPayload = fragments?.map(f => {
    const newVal = f;
    delete newVal.id;
    delete newVal.markdownId;
    if (newVal?.optionsPayload?.classNamesPayload?.toggle)
      delete newVal.optionsPayload.classNamesPayload.toggle;
    if (newVal?.optionsPayload?.classNamesPayload?.imageContainer)
      delete newVal.optionsPayload.classNamesPayload.imageContainer;
    newVal.type = newVal.internal.type;
    delete newVal.internal.type;
    delete newVal.internal;
    //if (newVal?.optionsPayload?.classNamesPayload?.parent?.classes) {
    //  console.log(`<parent>`);
    //  console.log(newVal.optionsPayload.classNamesPayload.parent.classes);
    //}
    //if (newVal?.optionsPayload?.classNamesPayload?.p?.classes) {
    //  console.log(`<p>`);
    //  console.log(newVal.optionsPayload.classNamesPayload.p.classes);
    //}
    //if (newVal?.optionsPayload?.classNamesPayload?.h2?.classes) {
    //  console.log(`<h2>`);
    //  console.log(newVal.optionsPayload.classNamesPayload.h2.classes);
    //}
    //console.log(``);
    //console.log(newVal);
    return newVal;
  });
  tempVal.impressions =
    tempVal?.impressions &&
    Object.keys(tempVal.impressions).map(i => {
      const tempI = tempVal.impressions[i];
      delete tempI.id;
      tempI.parentId = getOrCreateUlid(tempI.parentId);
      return tempI;
    });
  if (typeof tempVal.impressions === `undefined`) delete tempVal.impressions;
  if (typeof tempVal.paneFragmentsPayload === `undefined`)
    delete tempVal.paneFragmentsPayload;
  return {
    id: ulid,
    title: s.title,
    slug: s.field_slug,
    created: new Date(s.created).toISOString().slice(0, 19).replace("T", " "),
    changed:
      (s.changed &&
        new Date(s.changed).toISOString().slice(0, 19).replace("T", " ")) ||
      null,
    is_context_pane: s.field_is_context_pane,
    markdown_id: markdownId,
    options_payload: (s?.field_options && JSON.stringify(tempVal)) || `{}`,
    height_offset_desktop: s.field_height_offset_desktop,
    height_offset_tablet: s.field_height_offset_tablet,
    height_offset_mobile: s.field_height_offset_mobile,
    height_ratio_desktop: s.field_height_ratio_desktop,
    height_ratio_tablet: s.field_height_ratio_tablet,
    height_ratio_mobile: s.field_height_ratio_mobile,
  };
});
//console.log(panesData);

const resourcesData = resources.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    title: s.title,
    slug: s.field_slug,
    category_slug: s.field_category_slug,
    oneliner: s.field_oneliner,
    options_payload: s.field_options,
    action_lisp: s.field_action_lisp,
  };
});
//console.log(resourcesData);

const markdownsData = markdowns.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    body: s.field_markdown_body,
  };
});
//console.log(markdownsData);

const currentDate = new Date();
const formattedDate = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, "0")}`;
const filesData = files.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    filename: s.filename,
    alt_description: s.filename,
    url: `/custom/images/${formattedDate}/${s.filename}`,
  };
});
//console.log(filesData);

const menusData = menus.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    title: s.title,
    theme: s.field_theme,
    options_payload: s.field_options,
  };
});
//console.log(menusData);

const storyfragmentsPanesData = storyfragments.map(s => {
  const ulid = getOrCreateUlid(s.id);
  return {
    id: ulid,
    paneIds: s.field_panes.map(t => getOrCreateUlid(t.id)),
  };
});
//console.log(storyfragmentsPanesData);

const filesPanesData = panes
  .map(s => {
    const ulid = getOrCreateUlid(s.id);
    const images = s.field_image.map(t => getOrCreateUlid(t.id));
    const svgs = s.field_image_svg.map(t => getOrCreateUlid(t.id));
    if (images.length || svgs.length)
      return {
        id: ulid,
        images,
        svgs,
      };
    else return null;
  })
  .filter(n => n);
//console.log(filesPanesData);

const filesMarkdownsData = markdowns
  .map(s => {
    const ulid = getOrCreateUlid(s.id);
    const images = s.field_image.map(t => getOrCreateUlid(t.id));
    const svgs = s.field_image_svg.map(t => getOrCreateUlid(t.id));
    if (images.length || svgs.length)
      return {
        id: ulid,
        images,
        svgs,
      };
    else return null;
  })
  .filter(n => n);
//console.log(filesMarkdownsData);

// must init database

try {
  await turso.execute(`
  PRAGMA foreign_keys = OFF;`);
  await turso.execute(`DROP TABLE IF EXISTS storyfragment_pane;`);
  await turso.execute(`DROP TABLE IF EXISTS file_pane;`);
  await turso.execute(`DROP TABLE IF EXISTS file_markdown;`);
  await turso.execute(`DROP TABLE IF EXISTS pane;`);
  await turso.execute(`DROP TABLE IF EXISTS storyfragment;`);
  await turso.execute(`DROP TABLE IF EXISTS markdown;`);
  await turso.execute(`DROP TABLE IF EXISTS file;`);
  await turso.execute(`DROP TABLE IF EXISTS resource;`);
  await turso.execute(`DROP TABLE IF EXISTS menu;`);
  await turso.execute(`DROP TABLE IF EXISTS tractstack;`);
  await turso.execute(`
  PRAGMA foreign_keys = ON;
`);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS tractstack (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        slug TEXT NOT NULL UNIQUE,
        social_image_path TEXT
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS menu (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        theme TEXT NOT NULL,
        options_payload TEXT NOT NULL
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS resource (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        slug TEXT NOT NULL UNIQUE,
        category_slug TEXT,
        oneliner TEXT NOT NULL,
        options_payload TEXT NOT NULL,
        action_lisp TEXT
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS file (
        id TEXT PRIMARY KEY,
        filename TEXT NOT NULL,
        alt_description TEXT NOT NULL,
        url TEXT NOT NULL
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS markdown (
        id TEXT PRIMARY KEY,
        body TEXT NOT NULL
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS storyfragment (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        slug TEXT NOT NULL UNIQUE,
        social_image_path TEXT,
        tailwind_background_colour TEXT,
        created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        changed TIMESTAMP,
        menu_id TEXT REFERENCES menu(id),
        tractstack_id TEXT NOT NULL REFERENCES tractstack(id)
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS pane (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        slug TEXT NOT NULL UNIQUE,
        created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        changed TIMESTAMP,
        markdown_id TEXT REFERENCES markdown(id),
        options_payload TEXT NOT NULL,
        is_context_pane BOOLEAN DEFAULT 0,
        height_offset_desktop INTEGER,
        height_offset_mobile INTEGER,
        height_offset_tablet INTEGER,
        height_ratio_desktop TEXT,
        height_ratio_mobile TEXT,
        height_ratio_tablet TEXT
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS storyfragment_pane (
        id TEXT PRIMARY KEY,
        storyfragment_id TEXT NOT NULL REFERENCES storyfragment(id),
        pane_id TEXT NOT NULL REFERENCES pane(id),
        weight INTEGER NOT NULL
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS file_pane (
        id TEXT PRIMARY KEY,
        file_id TEXT NOT NULL REFERENCES file(id),
        pane_id TEXT NOT NULL REFERENCES pane(id)
      )
    `);

  await turso.execute(`
      CREATE TABLE IF NOT EXISTS file_markdown (
        id TEXT PRIMARY KEY,
        file_id TEXT NOT NULL REFERENCES file(id),
        markdown_id TEXT NOT NULL REFERENCES markdown(id)
      )
    `);

  // Insert initial records

  for (const resource of resourcesData) {
    await turso.execute({
      sql: "INSERT INTO resource (id,title,slug,category_slug,oneliner,options_payload,action_lisp) VALUES (?, ?,?,?,?,?,?)",
      args: [
        resource.id,
        resource.title,
        resource.slug,
        resource.category_slug,
        resource.oneliner,
        resource.options_payload,
        resource.action_lisp,
      ],
    });
  }

  for (const menu of menusData) {
    await turso.execute({
      sql: "INSERT INTO menu (id,title,theme,options_payload) VALUES (?,?,?,?)",
      args: [menu.id, menu.title, menu.theme, menu.options_payload],
    });
  }

  for (const file of filesData) {
    await turso.execute({
      sql: "INSERT INTO file (id,filename,url) VALUES (?,?,?)",
      args: [file.id, file.filename, file.url],
    });
  }

  for (const markdown of markdownsData) {
    await turso.execute({
      sql: "INSERT INTO markdown (id,body) VALUES (?,?)",
      args: [markdown.id, markdown.body],
    });
  }

  for (const tractstack of tractstacksData) {
    await turso.execute({
      sql: "INSERT INTO tractstack (id,title,slug,social_image_path) VALUES (?,?,?,?)",
      args: [
        tractstack.id,
        tractstack.title,
        tractstack.slug,
        tractstack.social_image_path,
      ],
    });
  }

  for (const storyfragment of storyfragmentsData) {
    await turso.execute({
      sql: "INSERT INTO storyfragment (id,title,slug,social_image_path,tailwind_background_colour,created,changed,menu_id,tractstack_id) VALUES (?,?,?,?,?,?,?,?,?)",
      args: [
        storyfragment.id,
        storyfragment.title,
        storyfragment.slug,
        storyfragment.social_image_path,
        storyfragment.tailwind_background_colour,
        storyfragment.created,
        storyfragment.changed,
        storyfragment.menu_id,
        storyfragment.tractstack_id,
      ],
    });
  }

  for (const pane of panesData) {
    await turso.execute({
      sql: "INSERT INTO pane (id,title,slug,created,changed,markdown_id,options_payload,is_context_pane,height_offset_desktop,height_offset_tablet,height_offset_mobile,height_ratio_desktop,height_ratio_tablet,height_ratio_mobile) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
      args: [
        pane.id,
        pane.title,
        pane.slug,
        pane.created,
        pane.changed,
        pane.markdown_id,
        pane.options_payload,
        pane.is_context_pane,
        pane.height_offset_desktop,
        pane.height_offset_tablet,
        pane.height_offset_mobile,
        pane.height_ratio_desktop,
        pane.height_ratio_tablet,
        pane.height_ratio_mobile,
      ],
    });
  }

  for (const fileMarkdown of filesMarkdownsData) {
    for (const imageId of fileMarkdown.images) {
      const thisUlid = ulid();
      await turso.execute({
        sql: "INSERT INTO file_markdown (id,file_id,markdown_id) VALUES (?,?,?)",
        args: [thisUlid, imageId, fileMarkdown.id],
      });
    }
    for (const imageId of fileMarkdown.svgs) {
      const thisUlid = ulid();
      await turso.execute({
        sql: "INSERT INTO file_markdown (id,file_id,markdown_id) VALUES (?,?,?)",
        args: [thisUlid, imageId, fileMarkdown.id],
      });
    }
  }

  for (const filePane of filesPanesData) {
    for (const imageId of filePane.images) {
      const thisUlid = ulid();
      await turso.execute({
        sql: "INSERT INTO file_pane (id,file_id,pane_id) VALUES (?,?,?)",
        args: [thisUlid, imageId, filePane.id],
      });
    }
    for (const imageId of fileMarkdown.svgs) {
      const thisUlid = ulid();
      await turso.execute({
        sql: "INSERT INTO file_pane (id,file_id,pane_id) VALUES (?,?,?)",
        args: [thisUlid, imageId, filePane.id],
      });
    }
  }

  for (const storyfragmentPane of storyfragmentsPanesData) {
    let weight = 1;
    for (const paneId of storyfragmentPane.paneIds) {
      const thisUlid = ulid();
      await turso.execute({
        sql: "INSERT INTO storyfragment_pane (id, storyfragment_id, pane_id, weight) VALUES (?, ?, ?, ?)",
        args: [thisUlid, storyfragmentPane.id, paneId, weight],
      });
      weight++;
    }
  }
} catch (error) {
  console.error("Error accessing Turso database:", error);
}
console.log(uuidToUlidMap);
---

<h2>push data to Turso</h2>
<br />
<h3>Tract Stacks by uuid</h3>
<ul>
  {tractstacks.map(n => <li>{n.id}</li>)}
  {!tractstacks.length ? <li>none</li> : null}
</ul>
<br />
<h3>Story Fragments by uuid</h3>
<ul>
  {storyfragments.map(n => <li>{n.id}</li>)}
  {!storyfragments.length ? <li>none</li> : null}
</ul>
<br />
<h3>Panes by uuid</h3>
<ul>
  {panes.map(n => <li>{n.id}</li>)}
  {!panes.length ? <li>none</li> : null}
</ul>
<br />
<h3>Markdowns by uuid</h3>
<ul>
  {markdowns.map(n => <li>{n.id}</li>)}
  {!markdowns.length ? <li>none</li> : null}
</ul>
<br />
<h3>Files by uuid</h3>
<ul>
  {files.map(n => <li>{n.id}</li>)}
  {!files.length ? <li>none</li> : null}
</ul>
<br />
<h3>Resources by uuid</h3>
<ul>
  {resources.map(n => <li>{n.id}</li>)}
  {!resources.length ? <li>none</li> : null}
</ul>
<br />
<h3>Menus by uuid</h3>
<ul>
  {menus.map(n => <li>{n.id}</li>)}
  {!menus.length ? <li>none</li> : null}
</ul>
<br />
